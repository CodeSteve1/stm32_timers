
timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002ff8  08002ff8  00003ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003060  08003060  0000505c  2**0
                  CONTENTS
  4 .ARM          00000000  08003060  08003060  0000505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003060  08003060  0000505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003060  08003060  00004060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003064  08003064  00004064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08003068  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000005c  080030c4  0000505c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  080030c4  00005258  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000505c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2f3  00000000  00000000  00005085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019be  00000000  00000000  00010378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  00011d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008f2  00000000  00000000  000128a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e2d  00000000  00000000  00013192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c930  00000000  00000000  00029fbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008877e  00000000  00000000  000368ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bf06d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e4  00000000  00000000  000bf0b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000c2594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fe0 	.word	0x08002fe0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002fe0 	.word	0x08002fe0

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b090      	sub	sp, #64	@ 0x40
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fa9d 	bl	8000690 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f831 	bl	80001bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f90f 	bl	800037c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015e:	f000 f8e3 	bl	8000328 <MX_USART2_UART_Init>
  MX_TIM4_Init();
 8000162:	f000 f86d 	bl	8000240 <MX_TIM4_Init>
  HAL_TIM_Base_Start(&htim4);
 8000166:	4812      	ldr	r0, [pc, #72]	@ (80001b0 <main+0x64>)
 8000168:	f001 fa22 	bl	80015b0 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  timer_val=__HAL_TIM_GET_COUNTER(&htim4);
 800016c:	4b10      	ldr	r3, [pc, #64]	@ (80001b0 <main+0x64>)
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000172:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	  HAL_Delay(50);
 8000174:	2032      	movs	r0, #50	@ 0x32
 8000176:	f000 faed 	bl	8000754 <HAL_Delay>
	  timer_val =__HAL_TIM_GET_COUNTER(&htim4)-timer_val;
 800017a:	4b0d      	ldr	r3, [pc, #52]	@ (80001b0 <main+0x64>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000180:	b29a      	uxth	r2, r3
 8000182:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8000184:	1ad3      	subs	r3, r2, r3
 8000186:	87fb      	strh	r3, [r7, #62]	@ 0x3e

	  uart_buf_len = sprintf(uart_buffer,"%u us\r\n",timer_val);
 8000188:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800018a:	1d3b      	adds	r3, r7, #4
 800018c:	4909      	ldr	r1, [pc, #36]	@ (80001b4 <main+0x68>)
 800018e:	4618      	mov	r0, r3
 8000190:	f002 fa76 	bl	8002680 <siprintf>
 8000194:	63b8      	str	r0, [r7, #56]	@ 0x38
	  HAL_UART_Transmit(&huart2,(uint8_t*)uart_buffer,uart_buf_len,100);
 8000196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000198:	b29a      	uxth	r2, r3
 800019a:	1d39      	adds	r1, r7, #4
 800019c:	2364      	movs	r3, #100	@ 0x64
 800019e:	4806      	ldr	r0, [pc, #24]	@ (80001b8 <main+0x6c>)
 80001a0:	f002 f89a 	bl	80022d8 <HAL_UART_Transmit>

	  HAL_Delay(1000);
 80001a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80001a8:	f000 fad4 	bl	8000754 <HAL_Delay>
  {
 80001ac:	bf00      	nop
 80001ae:	e7dd      	b.n	800016c <main+0x20>
 80001b0:	20000078 	.word	0x20000078
 80001b4:	08002ff8 	.word	0x08002ff8
 80001b8:	200000c0 	.word	0x200000c0

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b090      	sub	sp, #64	@ 0x40
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	2228      	movs	r2, #40	@ 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f002 fa78 	bl	80026c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001de:	2302      	movs	r3, #2
 80001e0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001e2:	2301      	movs	r3, #1
 80001e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001e6:	2310      	movs	r3, #16
 80001e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ea:	2302      	movs	r3, #2
 80001ec:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001ee:	2300      	movs	r3, #0
 80001f0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001f2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001f8:	f107 0318 	add.w	r3, r7, #24
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 fd77 	bl	8000cf0 <HAL_RCC_OscConfig>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000208:	f000 f90e 	bl	8000428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800020c:	230f      	movs	r3, #15
 800020e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000210:	2302      	movs	r3, #2
 8000212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000214:	2300      	movs	r3, #0
 8000216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000218:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800021c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800021e:	2300      	movs	r3, #0
 8000220:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	2102      	movs	r1, #2
 8000226:	4618      	mov	r0, r3
 8000228:	f000 ffe4 	bl	80011f4 <HAL_RCC_ClockConfig>
 800022c:	4603      	mov	r3, r0
 800022e:	2b00      	cmp	r3, #0
 8000230:	d001      	beq.n	8000236 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000232:	f000 f8f9 	bl	8000428 <Error_Handler>
  }
}
 8000236:	bf00      	nop
 8000238:	3740      	adds	r7, #64	@ 0x40
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
	...

08000240 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b08e      	sub	sp, #56	@ 0x38
 8000244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000246:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000254:	f107 0320 	add.w	r3, r7, #32
 8000258:	2200      	movs	r2, #0
 800025a:	601a      	str	r2, [r3, #0]
 800025c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]
 8000264:	605a      	str	r2, [r3, #4]
 8000266:	609a      	str	r2, [r3, #8]
 8000268:	60da      	str	r2, [r3, #12]
 800026a:	611a      	str	r2, [r3, #16]
 800026c:	615a      	str	r2, [r3, #20]
 800026e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000270:	4b2b      	ldr	r3, [pc, #172]	@ (8000320 <MX_TIM4_Init+0xe0>)
 8000272:	4a2c      	ldr	r2, [pc, #176]	@ (8000324 <MX_TIM4_Init+0xe4>)
 8000274:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64-1;
 8000276:	4b2a      	ldr	r3, [pc, #168]	@ (8000320 <MX_TIM4_Init+0xe0>)
 8000278:	223f      	movs	r2, #63	@ 0x3f
 800027a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800027c:	4b28      	ldr	r3, [pc, #160]	@ (8000320 <MX_TIM4_Init+0xe0>)
 800027e:	2200      	movs	r2, #0
 8000280:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000282:	4b27      	ldr	r3, [pc, #156]	@ (8000320 <MX_TIM4_Init+0xe0>)
 8000284:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000288:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800028a:	4b25      	ldr	r3, [pc, #148]	@ (8000320 <MX_TIM4_Init+0xe0>)
 800028c:	2200      	movs	r2, #0
 800028e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000290:	4b23      	ldr	r3, [pc, #140]	@ (8000320 <MX_TIM4_Init+0xe0>)
 8000292:	2200      	movs	r2, #0
 8000294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000296:	4822      	ldr	r0, [pc, #136]	@ (8000320 <MX_TIM4_Init+0xe0>)
 8000298:	f001 f93a 	bl	8001510 <HAL_TIM_Base_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80002a2:	f000 f8c1 	bl	8000428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80002a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80002aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80002ac:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80002b0:	4619      	mov	r1, r3
 80002b2:	481b      	ldr	r0, [pc, #108]	@ (8000320 <MX_TIM4_Init+0xe0>)
 80002b4:	f001 fbd0 	bl	8001a58 <HAL_TIM_ConfigClockSource>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80002be:	f000 f8b3 	bl	8000428 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80002c2:	4817      	ldr	r0, [pc, #92]	@ (8000320 <MX_TIM4_Init+0xe0>)
 80002c4:	f001 f9be 	bl	8001644 <HAL_TIM_PWM_Init>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80002ce:	f000 f8ab 	bl	8000428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80002d2:	2310      	movs	r3, #16
 80002d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80002d6:	2380      	movs	r3, #128	@ 0x80
 80002d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80002da:	f107 0320 	add.w	r3, r7, #32
 80002de:	4619      	mov	r1, r3
 80002e0:	480f      	ldr	r0, [pc, #60]	@ (8000320 <MX_TIM4_Init+0xe0>)
 80002e2:	f001 ff39 	bl	8002158 <HAL_TIMEx_MasterConfigSynchronization>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80002ec:	f000 f89c 	bl	8000428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002f0:	2360      	movs	r3, #96	@ 0x60
 80002f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80002f4:	2300      	movs	r3, #0
 80002f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000300:	1d3b      	adds	r3, r7, #4
 8000302:	2200      	movs	r2, #0
 8000304:	4619      	mov	r1, r3
 8000306:	4806      	ldr	r0, [pc, #24]	@ (8000320 <MX_TIM4_Init+0xe0>)
 8000308:	f001 fae4 	bl	80018d4 <HAL_TIM_PWM_ConfigChannel>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000312:	f000 f889 	bl	8000428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	3738      	adds	r7, #56	@ 0x38
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	20000078 	.word	0x20000078
 8000324:	40000800 	.word	0x40000800

08000328 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800032c:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 800032e:	4a12      	ldr	r2, [pc, #72]	@ (8000378 <MX_USART2_UART_Init+0x50>)
 8000330:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000332:	4b10      	ldr	r3, [pc, #64]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 8000334:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000338:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800033a:	4b0e      	ldr	r3, [pc, #56]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 800033c:	2200      	movs	r2, #0
 800033e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000340:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 8000342:	2200      	movs	r2, #0
 8000344:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000346:	4b0b      	ldr	r3, [pc, #44]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 8000348:	2200      	movs	r2, #0
 800034a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800034c:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 800034e:	220c      	movs	r2, #12
 8000350:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000352:	4b08      	ldr	r3, [pc, #32]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 8000354:	2200      	movs	r2, #0
 8000356:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000358:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 800035a:	2200      	movs	r2, #0
 800035c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800035e:	4805      	ldr	r0, [pc, #20]	@ (8000374 <MX_USART2_UART_Init+0x4c>)
 8000360:	f001 ff6a 	bl	8002238 <HAL_UART_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800036a:	f000 f85d 	bl	8000428 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	200000c0 	.word	0x200000c0
 8000378:	40004400 	.word	0x40004400

0800037c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	b088      	sub	sp, #32
 8000380:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000382:	f107 0310 	add.w	r3, r7, #16
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
 800038c:	609a      	str	r2, [r3, #8]
 800038e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000390:	4b23      	ldr	r3, [pc, #140]	@ (8000420 <MX_GPIO_Init+0xa4>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a22      	ldr	r2, [pc, #136]	@ (8000420 <MX_GPIO_Init+0xa4>)
 8000396:	f043 0310 	orr.w	r3, r3, #16
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b20      	ldr	r3, [pc, #128]	@ (8000420 <MX_GPIO_Init+0xa4>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0310 	and.w	r3, r3, #16
 80003a4:	60fb      	str	r3, [r7, #12]
 80003a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000420 <MX_GPIO_Init+0xa4>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a1c      	ldr	r2, [pc, #112]	@ (8000420 <MX_GPIO_Init+0xa4>)
 80003ae:	f043 0320 	orr.w	r3, r3, #32
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000420 <MX_GPIO_Init+0xa4>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0320 	and.w	r3, r3, #32
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c0:	4b17      	ldr	r3, [pc, #92]	@ (8000420 <MX_GPIO_Init+0xa4>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a16      	ldr	r2, [pc, #88]	@ (8000420 <MX_GPIO_Init+0xa4>)
 80003c6:	f043 0304 	orr.w	r3, r3, #4
 80003ca:	6193      	str	r3, [r2, #24]
 80003cc:	4b14      	ldr	r3, [pc, #80]	@ (8000420 <MX_GPIO_Init+0xa4>)
 80003ce:	699b      	ldr	r3, [r3, #24]
 80003d0:	f003 0304 	and.w	r3, r3, #4
 80003d4:	607b      	str	r3, [r7, #4]
 80003d6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d8:	4b11      	ldr	r3, [pc, #68]	@ (8000420 <MX_GPIO_Init+0xa4>)
 80003da:	699b      	ldr	r3, [r3, #24]
 80003dc:	4a10      	ldr	r2, [pc, #64]	@ (8000420 <MX_GPIO_Init+0xa4>)
 80003de:	f043 0308 	orr.w	r3, r3, #8
 80003e2:	6193      	str	r3, [r2, #24]
 80003e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000420 <MX_GPIO_Init+0xa4>)
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	f003 0308 	and.w	r3, r3, #8
 80003ec:	603b      	str	r3, [r7, #0]
 80003ee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80003f0:	2200      	movs	r2, #0
 80003f2:	2120      	movs	r1, #32
 80003f4:	480b      	ldr	r0, [pc, #44]	@ (8000424 <MX_GPIO_Init+0xa8>)
 80003f6:	f000 fc63 	bl	8000cc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80003fa:	2320      	movs	r3, #32
 80003fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fe:	2301      	movs	r3, #1
 8000400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	2302      	movs	r3, #2
 8000408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	4619      	mov	r1, r3
 8000410:	4804      	ldr	r0, [pc, #16]	@ (8000424 <MX_GPIO_Init+0xa8>)
 8000412:	f000 fad1 	bl	80009b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000416:	bf00      	nop
 8000418:	3720      	adds	r7, #32
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
 800041e:	bf00      	nop
 8000420:	40021000 	.word	0x40021000
 8000424:	40010800 	.word	0x40010800

08000428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800042c:	b672      	cpsid	i
}
 800042e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000430:	bf00      	nop
 8000432:	e7fd      	b.n	8000430 <Error_Handler+0x8>

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b480      	push	{r7}
 8000436:	b085      	sub	sp, #20
 8000438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043a:	4b15      	ldr	r3, [pc, #84]	@ (8000490 <HAL_MspInit+0x5c>)
 800043c:	699b      	ldr	r3, [r3, #24]
 800043e:	4a14      	ldr	r2, [pc, #80]	@ (8000490 <HAL_MspInit+0x5c>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6193      	str	r3, [r2, #24]
 8000446:	4b12      	ldr	r3, [pc, #72]	@ (8000490 <HAL_MspInit+0x5c>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	60bb      	str	r3, [r7, #8]
 8000450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	@ (8000490 <HAL_MspInit+0x5c>)
 8000454:	69db      	ldr	r3, [r3, #28]
 8000456:	4a0e      	ldr	r2, [pc, #56]	@ (8000490 <HAL_MspInit+0x5c>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800045c:	61d3      	str	r3, [r2, #28]
 800045e:	4b0c      	ldr	r3, [pc, #48]	@ (8000490 <HAL_MspInit+0x5c>)
 8000460:	69db      	ldr	r3, [r3, #28]
 8000462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000466:	607b      	str	r3, [r7, #4]
 8000468:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046a:	4b0a      	ldr	r3, [pc, #40]	@ (8000494 <HAL_MspInit+0x60>)
 800046c:	685b      	ldr	r3, [r3, #4]
 800046e:	60fb      	str	r3, [r7, #12]
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000476:	60fb      	str	r3, [r7, #12]
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800047e:	60fb      	str	r3, [r7, #12]
 8000480:	4a04      	ldr	r2, [pc, #16]	@ (8000494 <HAL_MspInit+0x60>)
 8000482:	68fb      	ldr	r3, [r7, #12]
 8000484:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000486:	bf00      	nop
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	40021000 	.word	0x40021000
 8000494:	40010000 	.word	0x40010000

08000498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b084      	sub	sp, #16
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	4a0d      	ldr	r2, [pc, #52]	@ (80004dc <HAL_TIM_Base_MspInit+0x44>)
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d113      	bne.n	80004d2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80004aa:	4b0d      	ldr	r3, [pc, #52]	@ (80004e0 <HAL_TIM_Base_MspInit+0x48>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4a0c      	ldr	r2, [pc, #48]	@ (80004e0 <HAL_TIM_Base_MspInit+0x48>)
 80004b0:	f043 0304 	orr.w	r3, r3, #4
 80004b4:	61d3      	str	r3, [r2, #28]
 80004b6:	4b0a      	ldr	r3, [pc, #40]	@ (80004e0 <HAL_TIM_Base_MspInit+0x48>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	f003 0304 	and.w	r3, r3, #4
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2100      	movs	r1, #0
 80004c6:	201e      	movs	r0, #30
 80004c8:	f000 fa3f 	bl	800094a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80004cc:	201e      	movs	r0, #30
 80004ce:	f000 fa58 	bl	8000982 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80004d2:	bf00      	nop
 80004d4:	3710      	adds	r7, #16
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40000800 	.word	0x40000800
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ec:	f107 0310 	add.w	r3, r7, #16
 80004f0:	2200      	movs	r2, #0
 80004f2:	601a      	str	r2, [r3, #0]
 80004f4:	605a      	str	r2, [r3, #4]
 80004f6:	609a      	str	r2, [r3, #8]
 80004f8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4a15      	ldr	r2, [pc, #84]	@ (8000554 <HAL_UART_MspInit+0x70>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d123      	bne.n	800054c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000504:	4b14      	ldr	r3, [pc, #80]	@ (8000558 <HAL_UART_MspInit+0x74>)
 8000506:	69db      	ldr	r3, [r3, #28]
 8000508:	4a13      	ldr	r2, [pc, #76]	@ (8000558 <HAL_UART_MspInit+0x74>)
 800050a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800050e:	61d3      	str	r3, [r2, #28]
 8000510:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <HAL_UART_MspInit+0x74>)
 8000512:	69db      	ldr	r3, [r3, #28]
 8000514:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000518:	60fb      	str	r3, [r7, #12]
 800051a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800051c:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <HAL_UART_MspInit+0x74>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	4a0d      	ldr	r2, [pc, #52]	@ (8000558 <HAL_UART_MspInit+0x74>)
 8000522:	f043 0304 	orr.w	r3, r3, #4
 8000526:	6193      	str	r3, [r2, #24]
 8000528:	4b0b      	ldr	r3, [pc, #44]	@ (8000558 <HAL_UART_MspInit+0x74>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	f003 0304 	and.w	r3, r3, #4
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000534:	230c      	movs	r3, #12
 8000536:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000538:	2302      	movs	r3, #2
 800053a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800053c:	2302      	movs	r3, #2
 800053e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000540:	f107 0310 	add.w	r3, r7, #16
 8000544:	4619      	mov	r1, r3
 8000546:	4805      	ldr	r0, [pc, #20]	@ (800055c <HAL_UART_MspInit+0x78>)
 8000548:	f000 fa36 	bl	80009b8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800054c:	bf00      	nop
 800054e:	3720      	adds	r7, #32
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40004400 	.word	0x40004400
 8000558:	40021000 	.word	0x40021000
 800055c:	40010800 	.word	0x40010800

08000560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <NMI_Handler+0x4>

08000568 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <HardFault_Handler+0x4>

08000570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <MemManage_Handler+0x4>

08000578 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800057c:	bf00      	nop
 800057e:	e7fd      	b.n	800057c <BusFault_Handler+0x4>

08000580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000584:	bf00      	nop
 8000586:	e7fd      	b.n	8000584 <UsageFault_Handler+0x4>

08000588 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr

08000594 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	bc80      	pop	{r7}
 800059e:	4770      	bx	lr

080005a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bc80      	pop	{r7}
 80005aa:	4770      	bx	lr

080005ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005b0:	f000 f8b4 	bl	800071c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005b4:	bf00      	nop
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80005bc:	4802      	ldr	r0, [pc, #8]	@ (80005c8 <TIM4_IRQHandler+0x10>)
 80005be:	f001 f899 	bl	80016f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000078 	.word	0x20000078

080005cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005d4:	4a14      	ldr	r2, [pc, #80]	@ (8000628 <_sbrk+0x5c>)
 80005d6:	4b15      	ldr	r3, [pc, #84]	@ (800062c <_sbrk+0x60>)
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005e0:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <_sbrk+0x64>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d102      	bne.n	80005ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005e8:	4b11      	ldr	r3, [pc, #68]	@ (8000630 <_sbrk+0x64>)
 80005ea:	4a12      	ldr	r2, [pc, #72]	@ (8000634 <_sbrk+0x68>)
 80005ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ee:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <_sbrk+0x64>)
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	4413      	add	r3, r2
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d207      	bcs.n	800060c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005fc:	f002 f868 	bl	80026d0 <__errno>
 8000600:	4603      	mov	r3, r0
 8000602:	220c      	movs	r2, #12
 8000604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000606:	f04f 33ff 	mov.w	r3, #4294967295
 800060a:	e009      	b.n	8000620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800060c:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <_sbrk+0x64>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000612:	4b07      	ldr	r3, [pc, #28]	@ (8000630 <_sbrk+0x64>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	4413      	add	r3, r2
 800061a:	4a05      	ldr	r2, [pc, #20]	@ (8000630 <_sbrk+0x64>)
 800061c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800061e:	68fb      	ldr	r3, [r7, #12]
}
 8000620:	4618      	mov	r0, r3
 8000622:	3718      	adds	r7, #24
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20005000 	.word	0x20005000
 800062c:	00000400 	.word	0x00000400
 8000630:	20000108 	.word	0x20000108
 8000634:	20000258 	.word	0x20000258

08000638 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	bc80      	pop	{r7}
 8000642:	4770      	bx	lr

08000644 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000644:	f7ff fff8 	bl	8000638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000648:	480b      	ldr	r0, [pc, #44]	@ (8000678 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800064a:	490c      	ldr	r1, [pc, #48]	@ (800067c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800064c:	4a0c      	ldr	r2, [pc, #48]	@ (8000680 <LoopFillZerobss+0x16>)
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000650:	e002      	b.n	8000658 <LoopCopyDataInit>

08000652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000656:	3304      	adds	r3, #4

08000658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800065a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800065c:	d3f9      	bcc.n	8000652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065e:	4a09      	ldr	r2, [pc, #36]	@ (8000684 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000660:	4c09      	ldr	r4, [pc, #36]	@ (8000688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000664:	e001      	b.n	800066a <LoopFillZerobss>

08000666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000668:	3204      	adds	r2, #4

0800066a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800066a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800066c:	d3fb      	bcc.n	8000666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800066e:	f002 f835 	bl	80026dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000672:	f7ff fd6b 	bl	800014c <main>
  bx lr
 8000676:	4770      	bx	lr
  ldr r0, =_sdata
 8000678:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800067c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000680:	08003068 	.word	0x08003068
  ldr r2, =_sbss
 8000684:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000688:	20000258 	.word	0x20000258

0800068c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800068c:	e7fe      	b.n	800068c <ADC1_2_IRQHandler>
	...

08000690 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000694:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <HAL_Init+0x28>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a07      	ldr	r2, [pc, #28]	@ (80006b8 <HAL_Init+0x28>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006a0:	2003      	movs	r0, #3
 80006a2:	f000 f947 	bl	8000934 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 f808 	bl	80006bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006ac:	f7ff fec2 	bl	8000434 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006b0:	2300      	movs	r3, #0
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40022000 	.word	0x40022000

080006bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006c4:	4b12      	ldr	r3, [pc, #72]	@ (8000710 <HAL_InitTick+0x54>)
 80006c6:	681a      	ldr	r2, [r3, #0]
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <HAL_InitTick+0x58>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 f95f 	bl	800099e <HAL_SYSTICK_Config>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006e6:	2301      	movs	r3, #1
 80006e8:	e00e      	b.n	8000708 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	2b0f      	cmp	r3, #15
 80006ee:	d80a      	bhi.n	8000706 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006f0:	2200      	movs	r2, #0
 80006f2:	6879      	ldr	r1, [r7, #4]
 80006f4:	f04f 30ff 	mov.w	r0, #4294967295
 80006f8:	f000 f927 	bl	800094a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006fc:	4a06      	ldr	r2, [pc, #24]	@ (8000718 <HAL_InitTick+0x5c>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000702:	2300      	movs	r3, #0
 8000704:	e000      	b.n	8000708 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000706:	2301      	movs	r3, #1
}
 8000708:	4618      	mov	r0, r3
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000000 	.word	0x20000000
 8000714:	20000008 	.word	0x20000008
 8000718:	20000004 	.word	0x20000004

0800071c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000720:	4b05      	ldr	r3, [pc, #20]	@ (8000738 <HAL_IncTick+0x1c>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4b05      	ldr	r3, [pc, #20]	@ (800073c <HAL_IncTick+0x20>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4413      	add	r3, r2
 800072c:	4a03      	ldr	r2, [pc, #12]	@ (800073c <HAL_IncTick+0x20>)
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	bc80      	pop	{r7}
 8000736:	4770      	bx	lr
 8000738:	20000008 	.word	0x20000008
 800073c:	2000010c 	.word	0x2000010c

08000740 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return uwTick;
 8000744:	4b02      	ldr	r3, [pc, #8]	@ (8000750 <HAL_GetTick+0x10>)
 8000746:	681b      	ldr	r3, [r3, #0]
}
 8000748:	4618      	mov	r0, r3
 800074a:	46bd      	mov	sp, r7
 800074c:	bc80      	pop	{r7}
 800074e:	4770      	bx	lr
 8000750:	2000010c 	.word	0x2000010c

08000754 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800075c:	f7ff fff0 	bl	8000740 <HAL_GetTick>
 8000760:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800076c:	d005      	beq.n	800077a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800076e:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <HAL_Delay+0x44>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800077a:	bf00      	nop
 800077c:	f7ff ffe0 	bl	8000740 <HAL_GetTick>
 8000780:	4602      	mov	r2, r0
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	1ad3      	subs	r3, r2, r3
 8000786:	68fa      	ldr	r2, [r7, #12]
 8000788:	429a      	cmp	r2, r3
 800078a:	d8f7      	bhi.n	800077c <HAL_Delay+0x28>
  {
  }
}
 800078c:	bf00      	nop
 800078e:	bf00      	nop
 8000790:	3710      	adds	r7, #16
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000008 	.word	0x20000008

0800079c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <__NVIC_SetPriorityGrouping+0x44>)
 80007ae:	68db      	ldr	r3, [r3, #12]
 80007b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b2:	68ba      	ldr	r2, [r7, #8]
 80007b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007b8:	4013      	ands	r3, r2
 80007ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007ce:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <__NVIC_SetPriorityGrouping+0x44>)
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	60d3      	str	r3, [r2, #12]
}
 80007d4:	bf00      	nop
 80007d6:	3714      	adds	r7, #20
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007e8:	4b04      	ldr	r3, [pc, #16]	@ (80007fc <__NVIC_GetPriorityGrouping+0x18>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	0a1b      	lsrs	r3, r3, #8
 80007ee:	f003 0307 	and.w	r3, r3, #7
}
 80007f2:	4618      	mov	r0, r3
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bc80      	pop	{r7}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	2b00      	cmp	r3, #0
 8000810:	db0b      	blt.n	800082a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	f003 021f 	and.w	r2, r3, #31
 8000818:	4906      	ldr	r1, [pc, #24]	@ (8000834 <__NVIC_EnableIRQ+0x34>)
 800081a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800081e:	095b      	lsrs	r3, r3, #5
 8000820:	2001      	movs	r0, #1
 8000822:	fa00 f202 	lsl.w	r2, r0, r2
 8000826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr
 8000834:	e000e100 	.word	0xe000e100

08000838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	6039      	str	r1, [r7, #0]
 8000842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	db0a      	blt.n	8000862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	b2da      	uxtb	r2, r3
 8000850:	490c      	ldr	r1, [pc, #48]	@ (8000884 <__NVIC_SetPriority+0x4c>)
 8000852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000856:	0112      	lsls	r2, r2, #4
 8000858:	b2d2      	uxtb	r2, r2
 800085a:	440b      	add	r3, r1
 800085c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000860:	e00a      	b.n	8000878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	b2da      	uxtb	r2, r3
 8000866:	4908      	ldr	r1, [pc, #32]	@ (8000888 <__NVIC_SetPriority+0x50>)
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	f003 030f 	and.w	r3, r3, #15
 800086e:	3b04      	subs	r3, #4
 8000870:	0112      	lsls	r2, r2, #4
 8000872:	b2d2      	uxtb	r2, r2
 8000874:	440b      	add	r3, r1
 8000876:	761a      	strb	r2, [r3, #24]
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000e100 	.word	0xe000e100
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800088c:	b480      	push	{r7}
 800088e:	b089      	sub	sp, #36	@ 0x24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	f003 0307 	and.w	r3, r3, #7
 800089e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	f1c3 0307 	rsb	r3, r3, #7
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	bf28      	it	cs
 80008aa:	2304      	movcs	r3, #4
 80008ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	3304      	adds	r3, #4
 80008b2:	2b06      	cmp	r3, #6
 80008b4:	d902      	bls.n	80008bc <NVIC_EncodePriority+0x30>
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	3b03      	subs	r3, #3
 80008ba:	e000      	b.n	80008be <NVIC_EncodePriority+0x32>
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43da      	mvns	r2, r3
 80008cc:	68bb      	ldr	r3, [r7, #8]
 80008ce:	401a      	ands	r2, r3
 80008d0:	697b      	ldr	r3, [r7, #20]
 80008d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008d4:	f04f 31ff 	mov.w	r1, #4294967295
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	fa01 f303 	lsl.w	r3, r1, r3
 80008de:	43d9      	mvns	r1, r3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008e4:	4313      	orrs	r3, r2
         );
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3724      	adds	r7, #36	@ 0x24
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr

080008f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000900:	d301      	bcc.n	8000906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000902:	2301      	movs	r3, #1
 8000904:	e00f      	b.n	8000926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000906:	4a0a      	ldr	r2, [pc, #40]	@ (8000930 <SysTick_Config+0x40>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800090e:	210f      	movs	r1, #15
 8000910:	f04f 30ff 	mov.w	r0, #4294967295
 8000914:	f7ff ff90 	bl	8000838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000918:	4b05      	ldr	r3, [pc, #20]	@ (8000930 <SysTick_Config+0x40>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091e:	4b04      	ldr	r3, [pc, #16]	@ (8000930 <SysTick_Config+0x40>)
 8000920:	2207      	movs	r2, #7
 8000922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	e000e010 	.word	0xe000e010

08000934 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f7ff ff2d 	bl	800079c <__NVIC_SetPriorityGrouping>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	4603      	mov	r3, r0
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
 8000956:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000958:	2300      	movs	r3, #0
 800095a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800095c:	f7ff ff42 	bl	80007e4 <__NVIC_GetPriorityGrouping>
 8000960:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	68b9      	ldr	r1, [r7, #8]
 8000966:	6978      	ldr	r0, [r7, #20]
 8000968:	f7ff ff90 	bl	800088c <NVIC_EncodePriority>
 800096c:	4602      	mov	r2, r0
 800096e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff ff5f 	bl	8000838 <__NVIC_SetPriority>
}
 800097a:	bf00      	nop
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000982:	b580      	push	{r7, lr}
 8000984:	b082      	sub	sp, #8
 8000986:	af00      	add	r7, sp, #0
 8000988:	4603      	mov	r3, r0
 800098a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800098c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000990:	4618      	mov	r0, r3
 8000992:	f7ff ff35 	bl	8000800 <__NVIC_EnableIRQ>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}

0800099e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800099e:	b580      	push	{r7, lr}
 80009a0:	b082      	sub	sp, #8
 80009a2:	af00      	add	r7, sp, #0
 80009a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f7ff ffa2 	bl	80008f0 <SysTick_Config>
 80009ac:	4603      	mov	r3, r0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b08b      	sub	sp, #44	@ 0x2c
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
 80009c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009c2:	2300      	movs	r3, #0
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ca:	e169      	b.n	8000ca0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80009cc:	2201      	movs	r2, #1
 80009ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	69fa      	ldr	r2, [r7, #28]
 80009dc:	4013      	ands	r3, r2
 80009de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009e0:	69ba      	ldr	r2, [r7, #24]
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	429a      	cmp	r2, r3
 80009e6:	f040 8158 	bne.w	8000c9a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	4a9a      	ldr	r2, [pc, #616]	@ (8000c58 <HAL_GPIO_Init+0x2a0>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d05e      	beq.n	8000ab2 <HAL_GPIO_Init+0xfa>
 80009f4:	4a98      	ldr	r2, [pc, #608]	@ (8000c58 <HAL_GPIO_Init+0x2a0>)
 80009f6:	4293      	cmp	r3, r2
 80009f8:	d875      	bhi.n	8000ae6 <HAL_GPIO_Init+0x12e>
 80009fa:	4a98      	ldr	r2, [pc, #608]	@ (8000c5c <HAL_GPIO_Init+0x2a4>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d058      	beq.n	8000ab2 <HAL_GPIO_Init+0xfa>
 8000a00:	4a96      	ldr	r2, [pc, #600]	@ (8000c5c <HAL_GPIO_Init+0x2a4>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d86f      	bhi.n	8000ae6 <HAL_GPIO_Init+0x12e>
 8000a06:	4a96      	ldr	r2, [pc, #600]	@ (8000c60 <HAL_GPIO_Init+0x2a8>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d052      	beq.n	8000ab2 <HAL_GPIO_Init+0xfa>
 8000a0c:	4a94      	ldr	r2, [pc, #592]	@ (8000c60 <HAL_GPIO_Init+0x2a8>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d869      	bhi.n	8000ae6 <HAL_GPIO_Init+0x12e>
 8000a12:	4a94      	ldr	r2, [pc, #592]	@ (8000c64 <HAL_GPIO_Init+0x2ac>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d04c      	beq.n	8000ab2 <HAL_GPIO_Init+0xfa>
 8000a18:	4a92      	ldr	r2, [pc, #584]	@ (8000c64 <HAL_GPIO_Init+0x2ac>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d863      	bhi.n	8000ae6 <HAL_GPIO_Init+0x12e>
 8000a1e:	4a92      	ldr	r2, [pc, #584]	@ (8000c68 <HAL_GPIO_Init+0x2b0>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d046      	beq.n	8000ab2 <HAL_GPIO_Init+0xfa>
 8000a24:	4a90      	ldr	r2, [pc, #576]	@ (8000c68 <HAL_GPIO_Init+0x2b0>)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d85d      	bhi.n	8000ae6 <HAL_GPIO_Init+0x12e>
 8000a2a:	2b12      	cmp	r3, #18
 8000a2c:	d82a      	bhi.n	8000a84 <HAL_GPIO_Init+0xcc>
 8000a2e:	2b12      	cmp	r3, #18
 8000a30:	d859      	bhi.n	8000ae6 <HAL_GPIO_Init+0x12e>
 8000a32:	a201      	add	r2, pc, #4	@ (adr r2, 8000a38 <HAL_GPIO_Init+0x80>)
 8000a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a38:	08000ab3 	.word	0x08000ab3
 8000a3c:	08000a8d 	.word	0x08000a8d
 8000a40:	08000a9f 	.word	0x08000a9f
 8000a44:	08000ae1 	.word	0x08000ae1
 8000a48:	08000ae7 	.word	0x08000ae7
 8000a4c:	08000ae7 	.word	0x08000ae7
 8000a50:	08000ae7 	.word	0x08000ae7
 8000a54:	08000ae7 	.word	0x08000ae7
 8000a58:	08000ae7 	.word	0x08000ae7
 8000a5c:	08000ae7 	.word	0x08000ae7
 8000a60:	08000ae7 	.word	0x08000ae7
 8000a64:	08000ae7 	.word	0x08000ae7
 8000a68:	08000ae7 	.word	0x08000ae7
 8000a6c:	08000ae7 	.word	0x08000ae7
 8000a70:	08000ae7 	.word	0x08000ae7
 8000a74:	08000ae7 	.word	0x08000ae7
 8000a78:	08000ae7 	.word	0x08000ae7
 8000a7c:	08000a95 	.word	0x08000a95
 8000a80:	08000aa9 	.word	0x08000aa9
 8000a84:	4a79      	ldr	r2, [pc, #484]	@ (8000c6c <HAL_GPIO_Init+0x2b4>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d013      	beq.n	8000ab2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a8a:	e02c      	b.n	8000ae6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	623b      	str	r3, [r7, #32]
          break;
 8000a92:	e029      	b.n	8000ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	3304      	adds	r3, #4
 8000a9a:	623b      	str	r3, [r7, #32]
          break;
 8000a9c:	e024      	b.n	8000ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	68db      	ldr	r3, [r3, #12]
 8000aa2:	3308      	adds	r3, #8
 8000aa4:	623b      	str	r3, [r7, #32]
          break;
 8000aa6:	e01f      	b.n	8000ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	330c      	adds	r3, #12
 8000aae:	623b      	str	r3, [r7, #32]
          break;
 8000ab0:	e01a      	b.n	8000ae8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	689b      	ldr	r3, [r3, #8]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d102      	bne.n	8000ac0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000aba:	2304      	movs	r3, #4
 8000abc:	623b      	str	r3, [r7, #32]
          break;
 8000abe:	e013      	b.n	8000ae8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	689b      	ldr	r3, [r3, #8]
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d105      	bne.n	8000ad4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ac8:	2308      	movs	r3, #8
 8000aca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	69fa      	ldr	r2, [r7, #28]
 8000ad0:	611a      	str	r2, [r3, #16]
          break;
 8000ad2:	e009      	b.n	8000ae8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ad4:	2308      	movs	r3, #8
 8000ad6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	69fa      	ldr	r2, [r7, #28]
 8000adc:	615a      	str	r2, [r3, #20]
          break;
 8000ade:	e003      	b.n	8000ae8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	623b      	str	r3, [r7, #32]
          break;
 8000ae4:	e000      	b.n	8000ae8 <HAL_GPIO_Init+0x130>
          break;
 8000ae6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	2bff      	cmp	r3, #255	@ 0xff
 8000aec:	d801      	bhi.n	8000af2 <HAL_GPIO_Init+0x13a>
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	e001      	b.n	8000af6 <HAL_GPIO_Init+0x13e>
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	3304      	adds	r3, #4
 8000af6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	2bff      	cmp	r3, #255	@ 0xff
 8000afc:	d802      	bhi.n	8000b04 <HAL_GPIO_Init+0x14c>
 8000afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	e002      	b.n	8000b0a <HAL_GPIO_Init+0x152>
 8000b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b06:	3b08      	subs	r3, #8
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	681a      	ldr	r2, [r3, #0]
 8000b10:	210f      	movs	r1, #15
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	fa01 f303 	lsl.w	r3, r1, r3
 8000b18:	43db      	mvns	r3, r3
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	6a39      	ldr	r1, [r7, #32]
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	fa01 f303 	lsl.w	r3, r1, r3
 8000b24:	431a      	orrs	r2, r3
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	685b      	ldr	r3, [r3, #4]
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	f000 80b1 	beq.w	8000c9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b38:	4b4d      	ldr	r3, [pc, #308]	@ (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a4c      	ldr	r2, [pc, #304]	@ (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b4a      	ldr	r3, [pc, #296]	@ (8000c70 <HAL_GPIO_Init+0x2b8>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b50:	4a48      	ldr	r2, [pc, #288]	@ (8000c74 <HAL_GPIO_Init+0x2bc>)
 8000b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b54:	089b      	lsrs	r3, r3, #2
 8000b56:	3302      	adds	r3, #2
 8000b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b60:	f003 0303 	and.w	r3, r3, #3
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	220f      	movs	r2, #15
 8000b68:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	4013      	ands	r3, r2
 8000b72:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a40      	ldr	r2, [pc, #256]	@ (8000c78 <HAL_GPIO_Init+0x2c0>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d013      	beq.n	8000ba4 <HAL_GPIO_Init+0x1ec>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a3f      	ldr	r2, [pc, #252]	@ (8000c7c <HAL_GPIO_Init+0x2c4>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d00d      	beq.n	8000ba0 <HAL_GPIO_Init+0x1e8>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a3e      	ldr	r2, [pc, #248]	@ (8000c80 <HAL_GPIO_Init+0x2c8>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d007      	beq.n	8000b9c <HAL_GPIO_Init+0x1e4>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a3d      	ldr	r2, [pc, #244]	@ (8000c84 <HAL_GPIO_Init+0x2cc>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d101      	bne.n	8000b98 <HAL_GPIO_Init+0x1e0>
 8000b94:	2303      	movs	r3, #3
 8000b96:	e006      	b.n	8000ba6 <HAL_GPIO_Init+0x1ee>
 8000b98:	2304      	movs	r3, #4
 8000b9a:	e004      	b.n	8000ba6 <HAL_GPIO_Init+0x1ee>
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	e002      	b.n	8000ba6 <HAL_GPIO_Init+0x1ee>
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e000      	b.n	8000ba6 <HAL_GPIO_Init+0x1ee>
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ba8:	f002 0203 	and.w	r2, r2, #3
 8000bac:	0092      	lsls	r2, r2, #2
 8000bae:	4093      	lsls	r3, r2
 8000bb0:	68fa      	ldr	r2, [r7, #12]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000bb6:	492f      	ldr	r1, [pc, #188]	@ (8000c74 <HAL_GPIO_Init+0x2bc>)
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bba:	089b      	lsrs	r3, r3, #2
 8000bbc:	3302      	adds	r3, #2
 8000bbe:	68fa      	ldr	r2, [r7, #12]
 8000bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d006      	beq.n	8000bde <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	492c      	ldr	r1, [pc, #176]	@ (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000bd6:	69bb      	ldr	r3, [r7, #24]
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	608b      	str	r3, [r1, #8]
 8000bdc:	e006      	b.n	8000bec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000bde:	4b2a      	ldr	r3, [pc, #168]	@ (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000be0:	689a      	ldr	r2, [r3, #8]
 8000be2:	69bb      	ldr	r3, [r7, #24]
 8000be4:	43db      	mvns	r3, r3
 8000be6:	4928      	ldr	r1, [pc, #160]	@ (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000be8:	4013      	ands	r3, r2
 8000bea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d006      	beq.n	8000c06 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bf8:	4b23      	ldr	r3, [pc, #140]	@ (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	4922      	ldr	r1, [pc, #136]	@ (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	4313      	orrs	r3, r2
 8000c02:	60cb      	str	r3, [r1, #12]
 8000c04:	e006      	b.n	8000c14 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c06:	4b20      	ldr	r3, [pc, #128]	@ (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	69bb      	ldr	r3, [r7, #24]
 8000c0c:	43db      	mvns	r3, r3
 8000c0e:	491e      	ldr	r1, [pc, #120]	@ (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000c10:	4013      	ands	r3, r2
 8000c12:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d006      	beq.n	8000c2e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c20:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000c22:	685a      	ldr	r2, [r3, #4]
 8000c24:	4918      	ldr	r1, [pc, #96]	@ (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	604b      	str	r3, [r1, #4]
 8000c2c:	e006      	b.n	8000c3c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c2e:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000c30:	685a      	ldr	r2, [r3, #4]
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	4914      	ldr	r1, [pc, #80]	@ (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000c38:	4013      	ands	r3, r2
 8000c3a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d021      	beq.n	8000c8c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000c4a:	681a      	ldr	r2, [r3, #0]
 8000c4c:	490e      	ldr	r1, [pc, #56]	@ (8000c88 <HAL_GPIO_Init+0x2d0>)
 8000c4e:	69bb      	ldr	r3, [r7, #24]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	600b      	str	r3, [r1, #0]
 8000c54:	e021      	b.n	8000c9a <HAL_GPIO_Init+0x2e2>
 8000c56:	bf00      	nop
 8000c58:	10320000 	.word	0x10320000
 8000c5c:	10310000 	.word	0x10310000
 8000c60:	10220000 	.word	0x10220000
 8000c64:	10210000 	.word	0x10210000
 8000c68:	10120000 	.word	0x10120000
 8000c6c:	10110000 	.word	0x10110000
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010000 	.word	0x40010000
 8000c78:	40010800 	.word	0x40010800
 8000c7c:	40010c00 	.word	0x40010c00
 8000c80:	40011000 	.word	0x40011000
 8000c84:	40011400 	.word	0x40011400
 8000c88:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cbc <HAL_GPIO_Init+0x304>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	69bb      	ldr	r3, [r7, #24]
 8000c92:	43db      	mvns	r3, r3
 8000c94:	4909      	ldr	r1, [pc, #36]	@ (8000cbc <HAL_GPIO_Init+0x304>)
 8000c96:	4013      	ands	r3, r2
 8000c98:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca6:	fa22 f303 	lsr.w	r3, r2, r3
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	f47f ae8e 	bne.w	80009cc <HAL_GPIO_Init+0x14>
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	bf00      	nop
 8000cb4:	372c      	adds	r7, #44	@ 0x2c
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bc80      	pop	{r7}
 8000cba:	4770      	bx	lr
 8000cbc:	40010400 	.word	0x40010400

08000cc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	807b      	strh	r3, [r7, #2]
 8000ccc:	4613      	mov	r3, r2
 8000cce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000cd0:	787b      	ldrb	r3, [r7, #1]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000cd6:	887a      	ldrh	r2, [r7, #2]
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000cdc:	e003      	b.n	8000ce6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000cde:	887b      	ldrh	r3, [r7, #2]
 8000ce0:	041a      	lsls	r2, r3, #16
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	611a      	str	r2, [r3, #16]
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bc80      	pop	{r7}
 8000cee:	4770      	bx	lr

08000cf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b086      	sub	sp, #24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d101      	bne.n	8000d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	e272      	b.n	80011e8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 8087 	beq.w	8000e1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d10:	4b92      	ldr	r3, [pc, #584]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 030c 	and.w	r3, r3, #12
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d00c      	beq.n	8000d36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d1c:	4b8f      	ldr	r3, [pc, #572]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 030c 	and.w	r3, r3, #12
 8000d24:	2b08      	cmp	r3, #8
 8000d26:	d112      	bne.n	8000d4e <HAL_RCC_OscConfig+0x5e>
 8000d28:	4b8c      	ldr	r3, [pc, #560]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d34:	d10b      	bne.n	8000d4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d36:	4b89      	ldr	r3, [pc, #548]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d06c      	beq.n	8000e1c <HAL_RCC_OscConfig+0x12c>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d168      	bne.n	8000e1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	e24c      	b.n	80011e8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d56:	d106      	bne.n	8000d66 <HAL_RCC_OscConfig+0x76>
 8000d58:	4b80      	ldr	r3, [pc, #512]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a7f      	ldr	r2, [pc, #508]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000d5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	e02e      	b.n	8000dc4 <HAL_RCC_OscConfig+0xd4>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10c      	bne.n	8000d88 <HAL_RCC_OscConfig+0x98>
 8000d6e:	4b7b      	ldr	r3, [pc, #492]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a7a      	ldr	r2, [pc, #488]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000d74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	4b78      	ldr	r3, [pc, #480]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a77      	ldr	r2, [pc, #476]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000d80:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d84:	6013      	str	r3, [r2, #0]
 8000d86:	e01d      	b.n	8000dc4 <HAL_RCC_OscConfig+0xd4>
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d90:	d10c      	bne.n	8000dac <HAL_RCC_OscConfig+0xbc>
 8000d92:	4b72      	ldr	r3, [pc, #456]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a71      	ldr	r2, [pc, #452]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000d98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	4b6f      	ldr	r3, [pc, #444]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a6e      	ldr	r2, [pc, #440]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000da8:	6013      	str	r3, [r2, #0]
 8000daa:	e00b      	b.n	8000dc4 <HAL_RCC_OscConfig+0xd4>
 8000dac:	4b6b      	ldr	r3, [pc, #428]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a6a      	ldr	r2, [pc, #424]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000db2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	4b68      	ldr	r3, [pc, #416]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a67      	ldr	r2, [pc, #412]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dc2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d013      	beq.n	8000df4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fcb8 	bl	8000740 <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd4:	f7ff fcb4 	bl	8000740 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b64      	cmp	r3, #100	@ 0x64
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e200      	b.n	80011e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000de6:	4b5d      	ldr	r3, [pc, #372]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0f0      	beq.n	8000dd4 <HAL_RCC_OscConfig+0xe4>
 8000df2:	e014      	b.n	8000e1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df4:	f7ff fca4 	bl	8000740 <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dfc:	f7ff fca0 	bl	8000740 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b64      	cmp	r3, #100	@ 0x64
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e1ec      	b.n	80011e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e0e:	4b53      	ldr	r3, [pc, #332]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f0      	bne.n	8000dfc <HAL_RCC_OscConfig+0x10c>
 8000e1a:	e000      	b.n	8000e1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d063      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e2a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 030c 	and.w	r3, r3, #12
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00b      	beq.n	8000e4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e36:	4b49      	ldr	r3, [pc, #292]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f003 030c 	and.w	r3, r3, #12
 8000e3e:	2b08      	cmp	r3, #8
 8000e40:	d11c      	bne.n	8000e7c <HAL_RCC_OscConfig+0x18c>
 8000e42:	4b46      	ldr	r3, [pc, #280]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d116      	bne.n	8000e7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e4e:	4b43      	ldr	r3, [pc, #268]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d005      	beq.n	8000e66 <HAL_RCC_OscConfig+0x176>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	691b      	ldr	r3, [r3, #16]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d001      	beq.n	8000e66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	e1c0      	b.n	80011e8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e66:	4b3d      	ldr	r3, [pc, #244]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	00db      	lsls	r3, r3, #3
 8000e74:	4939      	ldr	r1, [pc, #228]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000e76:	4313      	orrs	r3, r2
 8000e78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e7a:	e03a      	b.n	8000ef2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	691b      	ldr	r3, [r3, #16]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d020      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e84:	4b36      	ldr	r3, [pc, #216]	@ (8000f60 <HAL_RCC_OscConfig+0x270>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e8a:	f7ff fc59 	bl	8000740 <HAL_GetTick>
 8000e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e90:	e008      	b.n	8000ea4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e92:	f7ff fc55 	bl	8000740 <HAL_GetTick>
 8000e96:	4602      	mov	r2, r0
 8000e98:	693b      	ldr	r3, [r7, #16]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d901      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	e1a1      	b.n	80011e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ea4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d0f0      	beq.n	8000e92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	00db      	lsls	r3, r3, #3
 8000ebe:	4927      	ldr	r1, [pc, #156]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	600b      	str	r3, [r1, #0]
 8000ec4:	e015      	b.n	8000ef2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ec6:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <HAL_RCC_OscConfig+0x270>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ecc:	f7ff fc38 	bl	8000740 <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ed4:	f7ff fc34 	bl	8000740 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	2b02      	cmp	r3, #2
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e180      	b.n	80011e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f0      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0308 	and.w	r3, r3, #8
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d03a      	beq.n	8000f74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	699b      	ldr	r3, [r3, #24]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d019      	beq.n	8000f3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f06:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <HAL_RCC_OscConfig+0x274>)
 8000f08:	2201      	movs	r2, #1
 8000f0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f0c:	f7ff fc18 	bl	8000740 <HAL_GetTick>
 8000f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f12:	e008      	b.n	8000f26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f14:	f7ff fc14 	bl	8000740 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d901      	bls.n	8000f26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e160      	b.n	80011e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f26:	4b0d      	ldr	r3, [pc, #52]	@ (8000f5c <HAL_RCC_OscConfig+0x26c>)
 8000f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0f0      	beq.n	8000f14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f32:	2001      	movs	r0, #1
 8000f34:	f000 face 	bl	80014d4 <RCC_Delay>
 8000f38:	e01c      	b.n	8000f74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f64 <HAL_RCC_OscConfig+0x274>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f40:	f7ff fbfe 	bl	8000740 <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f46:	e00f      	b.n	8000f68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f48:	f7ff fbfa 	bl	8000740 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b02      	cmp	r3, #2
 8000f54:	d908      	bls.n	8000f68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e146      	b.n	80011e8 <HAL_RCC_OscConfig+0x4f8>
 8000f5a:	bf00      	nop
 8000f5c:	40021000 	.word	0x40021000
 8000f60:	42420000 	.word	0x42420000
 8000f64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f68:	4b92      	ldr	r3, [pc, #584]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8000f6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d1e9      	bne.n	8000f48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f003 0304 	and.w	r3, r3, #4
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f000 80a6 	beq.w	80010ce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f82:	2300      	movs	r3, #0
 8000f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f86:	4b8b      	ldr	r3, [pc, #556]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d10d      	bne.n	8000fae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	4b88      	ldr	r3, [pc, #544]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	4a87      	ldr	r2, [pc, #540]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f9c:	61d3      	str	r3, [r2, #28]
 8000f9e:	4b85      	ldr	r3, [pc, #532]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000faa:	2301      	movs	r3, #1
 8000fac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fae:	4b82      	ldr	r3, [pc, #520]	@ (80011b8 <HAL_RCC_OscConfig+0x4c8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d118      	bne.n	8000fec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fba:	4b7f      	ldr	r3, [pc, #508]	@ (80011b8 <HAL_RCC_OscConfig+0x4c8>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a7e      	ldr	r2, [pc, #504]	@ (80011b8 <HAL_RCC_OscConfig+0x4c8>)
 8000fc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fc6:	f7ff fbbb 	bl	8000740 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fce:	f7ff fbb7 	bl	8000740 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b64      	cmp	r3, #100	@ 0x64
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e103      	b.n	80011e8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe0:	4b75      	ldr	r3, [pc, #468]	@ (80011b8 <HAL_RCC_OscConfig+0x4c8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0f0      	beq.n	8000fce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d106      	bne.n	8001002 <HAL_RCC_OscConfig+0x312>
 8000ff4:	4b6f      	ldr	r3, [pc, #444]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8000ff6:	6a1b      	ldr	r3, [r3, #32]
 8000ff8:	4a6e      	ldr	r2, [pc, #440]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8000ffa:	f043 0301 	orr.w	r3, r3, #1
 8000ffe:	6213      	str	r3, [r2, #32]
 8001000:	e02d      	b.n	800105e <HAL_RCC_OscConfig+0x36e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d10c      	bne.n	8001024 <HAL_RCC_OscConfig+0x334>
 800100a:	4b6a      	ldr	r3, [pc, #424]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	4a69      	ldr	r2, [pc, #420]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	f023 0301 	bic.w	r3, r3, #1
 8001014:	6213      	str	r3, [r2, #32]
 8001016:	4b67      	ldr	r3, [pc, #412]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8001018:	6a1b      	ldr	r3, [r3, #32]
 800101a:	4a66      	ldr	r2, [pc, #408]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	f023 0304 	bic.w	r3, r3, #4
 8001020:	6213      	str	r3, [r2, #32]
 8001022:	e01c      	b.n	800105e <HAL_RCC_OscConfig+0x36e>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	2b05      	cmp	r3, #5
 800102a:	d10c      	bne.n	8001046 <HAL_RCC_OscConfig+0x356>
 800102c:	4b61      	ldr	r3, [pc, #388]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	4a60      	ldr	r2, [pc, #384]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8001032:	f043 0304 	orr.w	r3, r3, #4
 8001036:	6213      	str	r3, [r2, #32]
 8001038:	4b5e      	ldr	r3, [pc, #376]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	4a5d      	ldr	r2, [pc, #372]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 800103e:	f043 0301 	orr.w	r3, r3, #1
 8001042:	6213      	str	r3, [r2, #32]
 8001044:	e00b      	b.n	800105e <HAL_RCC_OscConfig+0x36e>
 8001046:	4b5b      	ldr	r3, [pc, #364]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8001048:	6a1b      	ldr	r3, [r3, #32]
 800104a:	4a5a      	ldr	r2, [pc, #360]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 800104c:	f023 0301 	bic.w	r3, r3, #1
 8001050:	6213      	str	r3, [r2, #32]
 8001052:	4b58      	ldr	r3, [pc, #352]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	4a57      	ldr	r2, [pc, #348]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8001058:	f023 0304 	bic.w	r3, r3, #4
 800105c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	68db      	ldr	r3, [r3, #12]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d015      	beq.n	8001092 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001066:	f7ff fb6b 	bl	8000740 <HAL_GetTick>
 800106a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800106c:	e00a      	b.n	8001084 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800106e:	f7ff fb67 	bl	8000740 <HAL_GetTick>
 8001072:	4602      	mov	r2, r0
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	1ad3      	subs	r3, r2, r3
 8001078:	f241 3288 	movw	r2, #5000	@ 0x1388
 800107c:	4293      	cmp	r3, r2
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e0b1      	b.n	80011e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001084:	4b4b      	ldr	r3, [pc, #300]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	f003 0302 	and.w	r3, r3, #2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d0ee      	beq.n	800106e <HAL_RCC_OscConfig+0x37e>
 8001090:	e014      	b.n	80010bc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001092:	f7ff fb55 	bl	8000740 <HAL_GetTick>
 8001096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001098:	e00a      	b.n	80010b0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800109a:	f7ff fb51 	bl	8000740 <HAL_GetTick>
 800109e:	4602      	mov	r2, r0
 80010a0:	693b      	ldr	r3, [r7, #16]
 80010a2:	1ad3      	subs	r3, r2, r3
 80010a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d901      	bls.n	80010b0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010ac:	2303      	movs	r3, #3
 80010ae:	e09b      	b.n	80011e8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b0:	4b40      	ldr	r3, [pc, #256]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 80010b2:	6a1b      	ldr	r3, [r3, #32]
 80010b4:	f003 0302 	and.w	r3, r3, #2
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1ee      	bne.n	800109a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010bc:	7dfb      	ldrb	r3, [r7, #23]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d105      	bne.n	80010ce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010c2:	4b3c      	ldr	r3, [pc, #240]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	4a3b      	ldr	r2, [pc, #236]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010cc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	69db      	ldr	r3, [r3, #28]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	f000 8087 	beq.w	80011e6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010d8:	4b36      	ldr	r3, [pc, #216]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f003 030c 	and.w	r3, r3, #12
 80010e0:	2b08      	cmp	r3, #8
 80010e2:	d061      	beq.n	80011a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d146      	bne.n	800117a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010ec:	4b33      	ldr	r3, [pc, #204]	@ (80011bc <HAL_RCC_OscConfig+0x4cc>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f2:	f7ff fb25 	bl	8000740 <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010fa:	f7ff fb21 	bl	8000740 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e06d      	b.n	80011e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800110c:	4b29      	ldr	r3, [pc, #164]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d1f0      	bne.n	80010fa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001120:	d108      	bne.n	8001134 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001122:	4b24      	ldr	r3, [pc, #144]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	4921      	ldr	r1, [pc, #132]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8001130:	4313      	orrs	r3, r2
 8001132:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001134:	4b1f      	ldr	r3, [pc, #124]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6a19      	ldr	r1, [r3, #32]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001144:	430b      	orrs	r3, r1
 8001146:	491b      	ldr	r1, [pc, #108]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 8001148:	4313      	orrs	r3, r2
 800114a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800114c:	4b1b      	ldr	r3, [pc, #108]	@ (80011bc <HAL_RCC_OscConfig+0x4cc>)
 800114e:	2201      	movs	r2, #1
 8001150:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001152:	f7ff faf5 	bl	8000740 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001158:	e008      	b.n	800116c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800115a:	f7ff faf1 	bl	8000740 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d901      	bls.n	800116c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e03d      	b.n	80011e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800116c:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d0f0      	beq.n	800115a <HAL_RCC_OscConfig+0x46a>
 8001178:	e035      	b.n	80011e6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800117a:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <HAL_RCC_OscConfig+0x4cc>)
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001180:	f7ff fade 	bl	8000740 <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001186:	e008      	b.n	800119a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001188:	f7ff fada 	bl	8000740 <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	2b02      	cmp	r3, #2
 8001194:	d901      	bls.n	800119a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001196:	2303      	movs	r3, #3
 8001198:	e026      	b.n	80011e8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f0      	bne.n	8001188 <HAL_RCC_OscConfig+0x498>
 80011a6:	e01e      	b.n	80011e6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	69db      	ldr	r3, [r3, #28]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d107      	bne.n	80011c0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e019      	b.n	80011e8 <HAL_RCC_OscConfig+0x4f8>
 80011b4:	40021000 	.word	0x40021000
 80011b8:	40007000 	.word	0x40007000
 80011bc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011c0:	4b0b      	ldr	r3, [pc, #44]	@ (80011f0 <HAL_RCC_OscConfig+0x500>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a1b      	ldr	r3, [r3, #32]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d106      	bne.n	80011e2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011de:	429a      	cmp	r2, r3
 80011e0:	d001      	beq.n	80011e6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e000      	b.n	80011e8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000

080011f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e0d0      	b.n	80013aa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001208:	4b6a      	ldr	r3, [pc, #424]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d910      	bls.n	8001238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001216:	4b67      	ldr	r3, [pc, #412]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 0207 	bic.w	r2, r3, #7
 800121e:	4965      	ldr	r1, [pc, #404]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001226:	4b63      	ldr	r3, [pc, #396]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e0b8      	b.n	80013aa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d020      	beq.n	8001286 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	d005      	beq.n	800125c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001250:	4b59      	ldr	r3, [pc, #356]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	4a58      	ldr	r2, [pc, #352]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800125a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0308 	and.w	r3, r3, #8
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001268:	4b53      	ldr	r3, [pc, #332]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4a52      	ldr	r2, [pc, #328]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 800126e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001272:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001274:	4b50      	ldr	r3, [pc, #320]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	494d      	ldr	r1, [pc, #308]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001282:	4313      	orrs	r3, r2
 8001284:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d040      	beq.n	8001314 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d107      	bne.n	80012aa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800129a:	4b47      	ldr	r3, [pc, #284]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d115      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a6:	2301      	movs	r3, #1
 80012a8:	e07f      	b.n	80013aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d107      	bne.n	80012c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012b2:	4b41      	ldr	r3, [pc, #260]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d109      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e073      	b.n	80013aa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c2:	4b3d      	ldr	r3, [pc, #244]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d101      	bne.n	80012d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e06b      	b.n	80013aa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012d2:	4b39      	ldr	r3, [pc, #228]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f023 0203 	bic.w	r2, r3, #3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4936      	ldr	r1, [pc, #216]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012e4:	f7ff fa2c 	bl	8000740 <HAL_GetTick>
 80012e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ea:	e00a      	b.n	8001302 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012ec:	f7ff fa28 	bl	8000740 <HAL_GetTick>
 80012f0:	4602      	mov	r2, r0
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e053      	b.n	80013aa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001302:	4b2d      	ldr	r3, [pc, #180]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 020c 	and.w	r2, r3, #12
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	429a      	cmp	r2, r3
 8001312:	d1eb      	bne.n	80012ec <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001314:	4b27      	ldr	r3, [pc, #156]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	683a      	ldr	r2, [r7, #0]
 800131e:	429a      	cmp	r2, r3
 8001320:	d210      	bcs.n	8001344 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001322:	4b24      	ldr	r3, [pc, #144]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f023 0207 	bic.w	r2, r3, #7
 800132a:	4922      	ldr	r1, [pc, #136]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c0>)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	4313      	orrs	r3, r2
 8001330:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001332:	4b20      	ldr	r3, [pc, #128]	@ (80013b4 <HAL_RCC_ClockConfig+0x1c0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	683a      	ldr	r2, [r7, #0]
 800133c:	429a      	cmp	r2, r3
 800133e:	d001      	beq.n	8001344 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e032      	b.n	80013aa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0304 	and.w	r3, r3, #4
 800134c:	2b00      	cmp	r3, #0
 800134e:	d008      	beq.n	8001362 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001350:	4b19      	ldr	r3, [pc, #100]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	4916      	ldr	r1, [pc, #88]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	4313      	orrs	r3, r2
 8001360:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	2b00      	cmp	r3, #0
 800136c:	d009      	beq.n	8001382 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800136e:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	490e      	ldr	r1, [pc, #56]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	4313      	orrs	r3, r2
 8001380:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001382:	f000 f821 	bl	80013c8 <HAL_RCC_GetSysClockFreq>
 8001386:	4602      	mov	r2, r0
 8001388:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <HAL_RCC_ClockConfig+0x1c4>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	490a      	ldr	r1, [pc, #40]	@ (80013bc <HAL_RCC_ClockConfig+0x1c8>)
 8001394:	5ccb      	ldrb	r3, [r1, r3]
 8001396:	fa22 f303 	lsr.w	r3, r2, r3
 800139a:	4a09      	ldr	r2, [pc, #36]	@ (80013c0 <HAL_RCC_ClockConfig+0x1cc>)
 800139c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800139e:	4b09      	ldr	r3, [pc, #36]	@ (80013c4 <HAL_RCC_ClockConfig+0x1d0>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff f98a 	bl	80006bc <HAL_InitTick>

  return HAL_OK;
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	40022000 	.word	0x40022000
 80013b8:	40021000 	.word	0x40021000
 80013bc:	08003000 	.word	0x08003000
 80013c0:	20000000 	.word	0x20000000
 80013c4:	20000004 	.word	0x20000004

080013c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b087      	sub	sp, #28
 80013cc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	2300      	movs	r3, #0
 80013d4:	60bb      	str	r3, [r7, #8]
 80013d6:	2300      	movs	r3, #0
 80013d8:	617b      	str	r3, [r7, #20]
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013e2:	4b1e      	ldr	r3, [pc, #120]	@ (800145c <HAL_RCC_GetSysClockFreq+0x94>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	d002      	beq.n	80013f8 <HAL_RCC_GetSysClockFreq+0x30>
 80013f2:	2b08      	cmp	r3, #8
 80013f4:	d003      	beq.n	80013fe <HAL_RCC_GetSysClockFreq+0x36>
 80013f6:	e027      	b.n	8001448 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013f8:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <HAL_RCC_GetSysClockFreq+0x98>)
 80013fa:	613b      	str	r3, [r7, #16]
      break;
 80013fc:	e027      	b.n	800144e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	0c9b      	lsrs	r3, r3, #18
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	4a17      	ldr	r2, [pc, #92]	@ (8001464 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001408:	5cd3      	ldrb	r3, [r2, r3]
 800140a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d010      	beq.n	8001438 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <HAL_RCC_GetSysClockFreq+0x94>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	0c5b      	lsrs	r3, r3, #17
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	4a11      	ldr	r2, [pc, #68]	@ (8001468 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001422:	5cd3      	ldrb	r3, [r2, r3]
 8001424:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a0d      	ldr	r2, [pc, #52]	@ (8001460 <HAL_RCC_GetSysClockFreq+0x98>)
 800142a:	fb03 f202 	mul.w	r2, r3, r2
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	fbb2 f3f3 	udiv	r3, r2, r3
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	e004      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a0c      	ldr	r2, [pc, #48]	@ (800146c <HAL_RCC_GetSysClockFreq+0xa4>)
 800143c:	fb02 f303 	mul.w	r3, r2, r3
 8001440:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	613b      	str	r3, [r7, #16]
      break;
 8001446:	e002      	b.n	800144e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001448:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <HAL_RCC_GetSysClockFreq+0x98>)
 800144a:	613b      	str	r3, [r7, #16]
      break;
 800144c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800144e:	693b      	ldr	r3, [r7, #16]
}
 8001450:	4618      	mov	r0, r3
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000
 8001460:	007a1200 	.word	0x007a1200
 8001464:	08003018 	.word	0x08003018
 8001468:	08003028 	.word	0x08003028
 800146c:	003d0900 	.word	0x003d0900

08001470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001474:	4b02      	ldr	r3, [pc, #8]	@ (8001480 <HAL_RCC_GetHCLKFreq+0x10>)
 8001476:	681b      	ldr	r3, [r3, #0]
}
 8001478:	4618      	mov	r0, r3
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000000 	.word	0x20000000

08001484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001488:	f7ff fff2 	bl	8001470 <HAL_RCC_GetHCLKFreq>
 800148c:	4602      	mov	r2, r0
 800148e:	4b05      	ldr	r3, [pc, #20]	@ (80014a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	0a1b      	lsrs	r3, r3, #8
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	4903      	ldr	r1, [pc, #12]	@ (80014a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800149a:	5ccb      	ldrb	r3, [r1, r3]
 800149c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40021000 	.word	0x40021000
 80014a8:	08003010 	.word	0x08003010

080014ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014b0:	f7ff ffde 	bl	8001470 <HAL_RCC_GetHCLKFreq>
 80014b4:	4602      	mov	r2, r0
 80014b6:	4b05      	ldr	r3, [pc, #20]	@ (80014cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	0adb      	lsrs	r3, r3, #11
 80014bc:	f003 0307 	and.w	r3, r3, #7
 80014c0:	4903      	ldr	r1, [pc, #12]	@ (80014d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014c2:	5ccb      	ldrb	r3, [r1, r3]
 80014c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40021000 	.word	0x40021000
 80014d0:	08003010 	.word	0x08003010

080014d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <RCC_Delay+0x34>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0a      	ldr	r2, [pc, #40]	@ (800150c <RCC_Delay+0x38>)
 80014e2:	fba2 2303 	umull	r2, r3, r2, r3
 80014e6:	0a5b      	lsrs	r3, r3, #9
 80014e8:	687a      	ldr	r2, [r7, #4]
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014f0:	bf00      	nop
  }
  while (Delay --);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	1e5a      	subs	r2, r3, #1
 80014f6:	60fa      	str	r2, [r7, #12]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d1f9      	bne.n	80014f0 <RCC_Delay+0x1c>
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	bc80      	pop	{r7}
 8001506:	4770      	bx	lr
 8001508:	20000000 	.word	0x20000000
 800150c:	10624dd3 	.word	0x10624dd3

08001510 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e041      	b.n	80015a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b00      	cmp	r3, #0
 800152c:	d106      	bne.n	800153c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f7fe ffae 	bl	8000498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2202      	movs	r2, #2
 8001540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3304      	adds	r3, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4610      	mov	r0, r2
 8001550:	f000 fb76 	bl	8001c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2201      	movs	r2, #1
 8001578:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2201      	movs	r2, #1
 8001580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2201      	movs	r2, #1
 8001590:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80015a4:	2300      	movs	r3, #0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d001      	beq.n	80015c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e032      	b.n	800162e <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2202      	movs	r2, #2
 80015cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a18      	ldr	r2, [pc, #96]	@ (8001638 <HAL_TIM_Base_Start+0x88>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d00e      	beq.n	80015f8 <HAL_TIM_Base_Start+0x48>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015e2:	d009      	beq.n	80015f8 <HAL_TIM_Base_Start+0x48>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a14      	ldr	r2, [pc, #80]	@ (800163c <HAL_TIM_Base_Start+0x8c>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d004      	beq.n	80015f8 <HAL_TIM_Base_Start+0x48>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a13      	ldr	r2, [pc, #76]	@ (8001640 <HAL_TIM_Base_Start+0x90>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d111      	bne.n	800161c <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f003 0307 	and.w	r3, r3, #7
 8001602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2b06      	cmp	r3, #6
 8001608:	d010      	beq.n	800162c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 0201 	orr.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800161a:	e007      	b.n	800162c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0201 	orr.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3714      	adds	r7, #20
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	40012c00 	.word	0x40012c00
 800163c:	40000400 	.word	0x40000400
 8001640:	40000800 	.word	0x40000800

08001644 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e041      	b.n	80016da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d106      	bne.n	8001670 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 f839 	bl	80016e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2202      	movs	r2, #2
 8001674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3304      	adds	r3, #4
 8001680:	4619      	mov	r1, r3
 8001682:	4610      	mov	r0, r2
 8001684:	f000 fadc 	bl	8001c40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2201      	movs	r2, #1
 80016a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3708      	adds	r7, #8
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d020      	beq.n	8001758 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	2b00      	cmp	r3, #0
 800171e:	d01b      	beq.n	8001758 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f06f 0202 	mvn.w	r2, #2
 8001728:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	2b00      	cmp	r3, #0
 800173c:	d003      	beq.n	8001746 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 fa63 	bl	8001c0a <HAL_TIM_IC_CaptureCallback>
 8001744:	e005      	b.n	8001752 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fa56 	bl	8001bf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fa65 	bl	8001c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b00      	cmp	r3, #0
 8001760:	d020      	beq.n	80017a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01b      	beq.n	80017a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f06f 0204 	mvn.w	r2, #4
 8001774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2202      	movs	r2, #2
 800177a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 fa3d 	bl	8001c0a <HAL_TIM_IC_CaptureCallback>
 8001790:	e005      	b.n	800179e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 fa30 	bl	8001bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 fa3f 	bl	8001c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d020      	beq.n	80017f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d01b      	beq.n	80017f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f06f 0208 	mvn.w	r2, #8
 80017c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2204      	movs	r2, #4
 80017c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	69db      	ldr	r3, [r3, #28]
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 fa17 	bl	8001c0a <HAL_TIM_IC_CaptureCallback>
 80017dc:	e005      	b.n	80017ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 fa0a 	bl	8001bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 fa19 	bl	8001c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d020      	beq.n	800183c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f003 0310 	and.w	r3, r3, #16
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01b      	beq.n	800183c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0210 	mvn.w	r2, #16
 800180c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2208      	movs	r2, #8
 8001812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f9f1 	bl	8001c0a <HAL_TIM_IC_CaptureCallback>
 8001828:	e005      	b.n	8001836 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f9e4 	bl	8001bf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f9f3 	bl	8001c1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	2b00      	cmp	r3, #0
 8001844:	d00c      	beq.n	8001860 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f003 0301 	and.w	r3, r3, #1
 800184c:	2b00      	cmp	r3, #0
 800184e:	d007      	beq.n	8001860 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0201 	mvn.w	r2, #1
 8001858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 f9c3 	bl	8001be6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00c      	beq.n	8001884 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001870:	2b00      	cmp	r3, #0
 8001872:	d007      	beq.n	8001884 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800187c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f000 fcd1 	bl	8002226 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00c      	beq.n	80018a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001894:	2b00      	cmp	r3, #0
 8001896:	d007      	beq.n	80018a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80018a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f9c3 	bl	8001c2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f003 0320 	and.w	r3, r3, #32
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00c      	beq.n	80018cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f003 0320 	and.w	r3, r3, #32
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d007      	beq.n	80018cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f06f 0220 	mvn.w	r2, #32
 80018c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f000 fca4 	bl	8002214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	60b9      	str	r1, [r7, #8]
 80018de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e0ae      	b.n	8001a50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2201      	movs	r2, #1
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b0c      	cmp	r3, #12
 80018fe:	f200 809f 	bhi.w	8001a40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001902:	a201      	add	r2, pc, #4	@ (adr r2, 8001908 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001908:	0800193d 	.word	0x0800193d
 800190c:	08001a41 	.word	0x08001a41
 8001910:	08001a41 	.word	0x08001a41
 8001914:	08001a41 	.word	0x08001a41
 8001918:	0800197d 	.word	0x0800197d
 800191c:	08001a41 	.word	0x08001a41
 8001920:	08001a41 	.word	0x08001a41
 8001924:	08001a41 	.word	0x08001a41
 8001928:	080019bf 	.word	0x080019bf
 800192c:	08001a41 	.word	0x08001a41
 8001930:	08001a41 	.word	0x08001a41
 8001934:	08001a41 	.word	0x08001a41
 8001938:	080019ff 	.word	0x080019ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	68b9      	ldr	r1, [r7, #8]
 8001942:	4618      	mov	r0, r3
 8001944:	f000 f9ea 	bl	8001d1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	699a      	ldr	r2, [r3, #24]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0208 	orr.w	r2, r2, #8
 8001956:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699a      	ldr	r2, [r3, #24]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0204 	bic.w	r2, r2, #4
 8001966:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6999      	ldr	r1, [r3, #24]
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	691a      	ldr	r2, [r3, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	619a      	str	r2, [r3, #24]
      break;
 800197a:	e064      	b.n	8001a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68b9      	ldr	r1, [r7, #8]
 8001982:	4618      	mov	r0, r3
 8001984:	f000 fa30 	bl	8001de8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	699a      	ldr	r2, [r3, #24]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	699a      	ldr	r2, [r3, #24]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6999      	ldr	r1, [r3, #24]
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	691b      	ldr	r3, [r3, #16]
 80019b2:	021a      	lsls	r2, r3, #8
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	619a      	str	r2, [r3, #24]
      break;
 80019bc:	e043      	b.n	8001a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	68b9      	ldr	r1, [r7, #8]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fa79 	bl	8001ebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	69da      	ldr	r2, [r3, #28]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f042 0208 	orr.w	r2, r2, #8
 80019d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	69da      	ldr	r2, [r3, #28]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f022 0204 	bic.w	r2, r2, #4
 80019e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	69d9      	ldr	r1, [r3, #28]
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	691a      	ldr	r2, [r3, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	430a      	orrs	r2, r1
 80019fa:	61da      	str	r2, [r3, #28]
      break;
 80019fc:	e023      	b.n	8001a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fac3 	bl	8001f90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	69da      	ldr	r2, [r3, #28]
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	69da      	ldr	r2, [r3, #28]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	69d9      	ldr	r1, [r3, #28]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	691b      	ldr	r3, [r3, #16]
 8001a34:	021a      	lsls	r2, r3, #8
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	430a      	orrs	r2, r1
 8001a3c:	61da      	str	r2, [r3, #28]
      break;
 8001a3e:	e002      	b.n	8001a46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	75fb      	strb	r3, [r7, #23]
      break;
 8001a44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3718      	adds	r7, #24
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_TIM_ConfigClockSource+0x1c>
 8001a70:	2302      	movs	r3, #2
 8001a72:	e0b4      	b.n	8001bde <HAL_TIM_ConfigClockSource+0x186>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2201      	movs	r2, #1
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001a92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001a9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68ba      	ldr	r2, [r7, #8]
 8001aa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001aac:	d03e      	beq.n	8001b2c <HAL_TIM_ConfigClockSource+0xd4>
 8001aae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ab2:	f200 8087 	bhi.w	8001bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001aba:	f000 8086 	beq.w	8001bca <HAL_TIM_ConfigClockSource+0x172>
 8001abe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ac2:	d87f      	bhi.n	8001bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ac4:	2b70      	cmp	r3, #112	@ 0x70
 8001ac6:	d01a      	beq.n	8001afe <HAL_TIM_ConfigClockSource+0xa6>
 8001ac8:	2b70      	cmp	r3, #112	@ 0x70
 8001aca:	d87b      	bhi.n	8001bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001acc:	2b60      	cmp	r3, #96	@ 0x60
 8001ace:	d050      	beq.n	8001b72 <HAL_TIM_ConfigClockSource+0x11a>
 8001ad0:	2b60      	cmp	r3, #96	@ 0x60
 8001ad2:	d877      	bhi.n	8001bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ad4:	2b50      	cmp	r3, #80	@ 0x50
 8001ad6:	d03c      	beq.n	8001b52 <HAL_TIM_ConfigClockSource+0xfa>
 8001ad8:	2b50      	cmp	r3, #80	@ 0x50
 8001ada:	d873      	bhi.n	8001bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001adc:	2b40      	cmp	r3, #64	@ 0x40
 8001ade:	d058      	beq.n	8001b92 <HAL_TIM_ConfigClockSource+0x13a>
 8001ae0:	2b40      	cmp	r3, #64	@ 0x40
 8001ae2:	d86f      	bhi.n	8001bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001ae4:	2b30      	cmp	r3, #48	@ 0x30
 8001ae6:	d064      	beq.n	8001bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8001ae8:	2b30      	cmp	r3, #48	@ 0x30
 8001aea:	d86b      	bhi.n	8001bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001aec:	2b20      	cmp	r3, #32
 8001aee:	d060      	beq.n	8001bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8001af0:	2b20      	cmp	r3, #32
 8001af2:	d867      	bhi.n	8001bc4 <HAL_TIM_ConfigClockSource+0x16c>
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d05c      	beq.n	8001bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8001af8:	2b10      	cmp	r3, #16
 8001afa:	d05a      	beq.n	8001bb2 <HAL_TIM_ConfigClockSource+0x15a>
 8001afc:	e062      	b.n	8001bc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b0e:	f000 fb04 	bl	800211a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001b20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	609a      	str	r2, [r3, #8]
      break;
 8001b2a:	e04f      	b.n	8001bcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001b3c:	f000 faed 	bl	800211a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b4e:	609a      	str	r2, [r3, #8]
      break;
 8001b50:	e03c      	b.n	8001bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b5e:	461a      	mov	r2, r3
 8001b60:	f000 fa64 	bl	800202c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2150      	movs	r1, #80	@ 0x50
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f000 fabb 	bl	80020e6 <TIM_ITRx_SetConfig>
      break;
 8001b70:	e02c      	b.n	8001bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f000 fa82 	bl	8002088 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2160      	movs	r1, #96	@ 0x60
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 faab 	bl	80020e6 <TIM_ITRx_SetConfig>
      break;
 8001b90:	e01c      	b.n	8001bcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	f000 fa44 	bl	800202c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2140      	movs	r1, #64	@ 0x40
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fa9b 	bl	80020e6 <TIM_ITRx_SetConfig>
      break;
 8001bb0:	e00c      	b.n	8001bcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	f000 fa92 	bl	80020e6 <TIM_ITRx_SetConfig>
      break;
 8001bc2:	e003      	b.n	8001bcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bc8:	e000      	b.n	8001bcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001bca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr

08001bf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bc80      	pop	{r7}
 8001c08:	4770      	bx	lr

08001c0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bc80      	pop	{r7}
 8001c2c:	4770      	bx	lr

08001c2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	4a2f      	ldr	r2, [pc, #188]	@ (8001d10 <TIM_Base_SetConfig+0xd0>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d00b      	beq.n	8001c70 <TIM_Base_SetConfig+0x30>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c5e:	d007      	beq.n	8001c70 <TIM_Base_SetConfig+0x30>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a2c      	ldr	r2, [pc, #176]	@ (8001d14 <TIM_Base_SetConfig+0xd4>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d003      	beq.n	8001c70 <TIM_Base_SetConfig+0x30>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a2b      	ldr	r2, [pc, #172]	@ (8001d18 <TIM_Base_SetConfig+0xd8>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d108      	bne.n	8001c82 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	68fa      	ldr	r2, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a22      	ldr	r2, [pc, #136]	@ (8001d10 <TIM_Base_SetConfig+0xd0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d00b      	beq.n	8001ca2 <TIM_Base_SetConfig+0x62>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c90:	d007      	beq.n	8001ca2 <TIM_Base_SetConfig+0x62>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	@ (8001d14 <TIM_Base_SetConfig+0xd4>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d003      	beq.n	8001ca2 <TIM_Base_SetConfig+0x62>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d18 <TIM_Base_SetConfig+0xd8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d108      	bne.n	8001cb4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ca8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68fa      	ldr	r2, [r7, #12]
 8001cc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a0d      	ldr	r2, [pc, #52]	@ (8001d10 <TIM_Base_SetConfig+0xd0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d103      	bne.n	8001ce8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d005      	beq.n	8001d06 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	691b      	ldr	r3, [r3, #16]
 8001cfe:	f023 0201 	bic.w	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	611a      	str	r2, [r3, #16]
  }
}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr
 8001d10:	40012c00 	.word	0x40012c00
 8001d14:	40000400 	.word	0x40000400
 8001d18:	40000800 	.word	0x40000800

08001d1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	f023 0201 	bic.w	r2, r3, #1
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f023 0303 	bic.w	r3, r3, #3
 8001d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f023 0302 	bic.w	r3, r3, #2
 8001d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689b      	ldr	r3, [r3, #8]
 8001d6a:	697a      	ldr	r2, [r7, #20]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4a1c      	ldr	r2, [pc, #112]	@ (8001de4 <TIM_OC1_SetConfig+0xc8>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d10c      	bne.n	8001d92 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f023 0308 	bic.w	r3, r3, #8
 8001d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f023 0304 	bic.w	r3, r3, #4
 8001d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a13      	ldr	r2, [pc, #76]	@ (8001de4 <TIM_OC1_SetConfig+0xc8>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d111      	bne.n	8001dbe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001da0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001da8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	697a      	ldr	r2, [r7, #20]
 8001dd6:	621a      	str	r2, [r3, #32]
}
 8001dd8:	bf00      	nop
 8001dda:	371c      	adds	r7, #28
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40012c00 	.word	0x40012c00

08001de8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b087      	sub	sp, #28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6a1b      	ldr	r3, [r3, #32]
 8001dfc:	f023 0210 	bic.w	r2, r3, #16
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	68fa      	ldr	r2, [r7, #12]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	f023 0320 	bic.w	r3, r3, #32
 8001e32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	011b      	lsls	r3, r3, #4
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb8 <TIM_OC2_SetConfig+0xd0>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d10d      	bne.n	8001e64 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	011b      	lsls	r3, r3, #4
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	4a14      	ldr	r2, [pc, #80]	@ (8001eb8 <TIM_OC2_SetConfig+0xd0>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d113      	bne.n	8001e94 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001e72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	68fa      	ldr	r2, [r7, #12]
 8001e9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685a      	ldr	r2, [r3, #4]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	621a      	str	r2, [r3, #32]
}
 8001eae:	bf00      	nop
 8001eb0:	371c      	adds	r7, #28
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	40012c00 	.word	0x40012c00

08001ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b087      	sub	sp, #28
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
 8001eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f023 0303 	bic.w	r3, r3, #3
 8001ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8001f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	021b      	lsls	r3, r3, #8
 8001f0c:	697a      	ldr	r2, [r7, #20]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a1d      	ldr	r2, [pc, #116]	@ (8001f8c <TIM_OC3_SetConfig+0xd0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d10d      	bne.n	8001f36 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001f20:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	021b      	lsls	r3, r3, #8
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001f34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a14      	ldr	r2, [pc, #80]	@ (8001f8c <TIM_OC3_SetConfig+0xd0>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d113      	bne.n	8001f66 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	011b      	lsls	r3, r3, #4
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	621a      	str	r2, [r3, #32]
}
 8001f80:	bf00      	nop
 8001f82:	371c      	adds	r7, #28
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bc80      	pop	{r7}
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop
 8001f8c:	40012c00 	.word	0x40012c00

08001f90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b087      	sub	sp, #28
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8001fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8001fda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	031b      	lsls	r3, r3, #12
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a0f      	ldr	r2, [pc, #60]	@ (8002028 <TIM_OC4_SetConfig+0x98>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d109      	bne.n	8002004 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001ff6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	019b      	lsls	r3, r3, #6
 8001ffe:	697a      	ldr	r2, [r7, #20]
 8002000:	4313      	orrs	r3, r2
 8002002:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	621a      	str	r2, [r3, #32]
}
 800201e:	bf00      	nop
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	40012c00 	.word	0x40012c00

0800202c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	f023 0201 	bic.w	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f023 030a 	bic.w	r3, r3, #10
 8002068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
 8002070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	621a      	str	r2, [r3, #32]
}
 800207e:	bf00      	nop
 8002080:	371c      	adds	r7, #28
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	f023 0210 	bic.w	r2, r3, #16
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80020b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	031b      	lsls	r3, r3, #12
 80020b8:	693a      	ldr	r2, [r7, #16]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80020c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	621a      	str	r2, [r3, #32]
}
 80020dc:	bf00      	nop
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	f043 0307 	orr.w	r3, r3, #7
 8002108:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	609a      	str	r2, [r3, #8]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800211a:	b480      	push	{r7}
 800211c:	b087      	sub	sp, #28
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002134:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	021a      	lsls	r2, r3, #8
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	431a      	orrs	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	4313      	orrs	r3, r2
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	609a      	str	r2, [r3, #8]
}
 800214e:	bf00      	nop
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800216c:	2302      	movs	r3, #2
 800216e:	e046      	b.n	80021fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002196:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a16      	ldr	r2, [pc, #88]	@ (8002208 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d00e      	beq.n	80021d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021bc:	d009      	beq.n	80021d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a12      	ldr	r2, [pc, #72]	@ (800220c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d004      	beq.n	80021d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a10      	ldr	r2, [pc, #64]	@ (8002210 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d10c      	bne.n	80021ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	40012c00 	.word	0x40012c00
 800220c:	40000400 	.word	0x40000400
 8002210:	40000800 	.word	0x40000800

08002214 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e042      	b.n	80022d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe f940 	bl	80004e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2224      	movs	r2, #36	@ 0x24
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68da      	ldr	r2, [r3, #12]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800227a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f000 f971 	bl	8002564 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	691a      	ldr	r2, [r3, #16]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80022a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80022b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2220      	movs	r2, #32
 80022c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	@ 0x28
 80022dc:	af02      	add	r7, sp, #8
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d175      	bne.n	80023e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d002      	beq.n	8002304 <HAL_UART_Transmit+0x2c>
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e06e      	b.n	80023e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2221      	movs	r2, #33	@ 0x21
 8002312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002316:	f7fe fa13 	bl	8000740 <HAL_GetTick>
 800231a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	88fa      	ldrh	r2, [r7, #6]
 8002320:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	88fa      	ldrh	r2, [r7, #6]
 8002326:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002330:	d108      	bne.n	8002344 <HAL_UART_Transmit+0x6c>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d104      	bne.n	8002344 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	61bb      	str	r3, [r7, #24]
 8002342:	e003      	b.n	800234c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800234c:	e02e      	b.n	80023ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	2200      	movs	r2, #0
 8002356:	2180      	movs	r1, #128	@ 0x80
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 f848 	bl	80023ee <UART_WaitOnFlagUntilTimeout>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2220      	movs	r2, #32
 8002368:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e03a      	b.n	80023e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10b      	bne.n	800238e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	461a      	mov	r2, r3
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002384:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	3302      	adds	r3, #2
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	e007      	b.n	800239e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	781a      	ldrb	r2, [r3, #0]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	3301      	adds	r3, #1
 800239c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1cb      	bne.n	800234e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	2200      	movs	r2, #0
 80023be:	2140      	movs	r1, #64	@ 0x40
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f814 	bl	80023ee <UART_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d005      	beq.n	80023d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80023d4:	2303      	movs	r3, #3
 80023d6:	e006      	b.n	80023e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80023e0:	2300      	movs	r3, #0
 80023e2:	e000      	b.n	80023e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80023e4:	2302      	movs	r3, #2
  }
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b086      	sub	sp, #24
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	60f8      	str	r0, [r7, #12]
 80023f6:	60b9      	str	r1, [r7, #8]
 80023f8:	603b      	str	r3, [r7, #0]
 80023fa:	4613      	mov	r3, r2
 80023fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023fe:	e03b      	b.n	8002478 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002400:	6a3b      	ldr	r3, [r7, #32]
 8002402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002406:	d037      	beq.n	8002478 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002408:	f7fe f99a 	bl	8000740 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	6a3a      	ldr	r2, [r7, #32]
 8002414:	429a      	cmp	r2, r3
 8002416:	d302      	bcc.n	800241e <UART_WaitOnFlagUntilTimeout+0x30>
 8002418:	6a3b      	ldr	r3, [r7, #32]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e03a      	b.n	8002498 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002430:	68bb      	ldr	r3, [r7, #8]
 8002432:	2b80      	cmp	r3, #128	@ 0x80
 8002434:	d020      	beq.n	8002478 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	2b40      	cmp	r3, #64	@ 0x40
 800243a:	d01d      	beq.n	8002478 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	2b08      	cmp	r3, #8
 8002448:	d116      	bne.n	8002478 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f81d 	bl	80024a0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2208      	movs	r2, #8
 800246a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e00f      	b.n	8002498 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	4013      	ands	r3, r2
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	429a      	cmp	r2, r3
 8002486:	bf0c      	ite	eq
 8002488:	2301      	moveq	r3, #1
 800248a:	2300      	movne	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	429a      	cmp	r2, r3
 8002494:	d0b4      	beq.n	8002400 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3718      	adds	r7, #24
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b095      	sub	sp, #84	@ 0x54
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	330c      	adds	r3, #12
 80024ae:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b2:	e853 3f00 	ldrex	r3, [r3]
 80024b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80024b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80024be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	330c      	adds	r3, #12
 80024c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80024ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024d0:	e841 2300 	strex	r3, r2, [r1]
 80024d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80024d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1e5      	bne.n	80024a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3314      	adds	r3, #20
 80024e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	e853 3f00 	ldrex	r3, [r3]
 80024ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	f023 0301 	bic.w	r3, r3, #1
 80024f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	3314      	adds	r3, #20
 80024fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002500:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002504:	e841 2300 	strex	r3, r2, [r1]
 8002508:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800250a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800250c:	2b00      	cmp	r3, #0
 800250e:	d1e5      	bne.n	80024dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002514:	2b01      	cmp	r3, #1
 8002516:	d119      	bne.n	800254c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	330c      	adds	r3, #12
 800251e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	e853 3f00 	ldrex	r3, [r3]
 8002526:	60bb      	str	r3, [r7, #8]
   return(result);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f023 0310 	bic.w	r3, r3, #16
 800252e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	330c      	adds	r3, #12
 8002536:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002538:	61ba      	str	r2, [r7, #24]
 800253a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253c:	6979      	ldr	r1, [r7, #20]
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	e841 2300 	strex	r3, r2, [r1]
 8002544:	613b      	str	r3, [r7, #16]
   return(result);
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1e5      	bne.n	8002518 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2220      	movs	r2, #32
 8002550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800255a:	bf00      	nop
 800255c:	3754      	adds	r7, #84	@ 0x54
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	68da      	ldr	r2, [r3, #12]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	430a      	orrs	r2, r1
 8002580:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689a      	ldr	r2, [r3, #8]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	4313      	orrs	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800259e:	f023 030c 	bic.w	r3, r3, #12
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	68b9      	ldr	r1, [r7, #8]
 80025a8:	430b      	orrs	r3, r1
 80025aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	695b      	ldr	r3, [r3, #20]
 80025b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	699a      	ldr	r2, [r3, #24]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	430a      	orrs	r2, r1
 80025c0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a2c      	ldr	r2, [pc, #176]	@ (8002678 <UART_SetConfig+0x114>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d103      	bne.n	80025d4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025cc:	f7fe ff6e 	bl	80014ac <HAL_RCC_GetPCLK2Freq>
 80025d0:	60f8      	str	r0, [r7, #12]
 80025d2:	e002      	b.n	80025da <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025d4:	f7fe ff56 	bl	8001484 <HAL_RCC_GetPCLK1Freq>
 80025d8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	4613      	mov	r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	4413      	add	r3, r2
 80025e2:	009a      	lsls	r2, r3, #2
 80025e4:	441a      	add	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f0:	4a22      	ldr	r2, [pc, #136]	@ (800267c <UART_SetConfig+0x118>)
 80025f2:	fba2 2303 	umull	r2, r3, r2, r3
 80025f6:	095b      	lsrs	r3, r3, #5
 80025f8:	0119      	lsls	r1, r3, #4
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	009a      	lsls	r2, r3, #2
 8002604:	441a      	add	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002610:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <UART_SetConfig+0x118>)
 8002612:	fba3 0302 	umull	r0, r3, r3, r2
 8002616:	095b      	lsrs	r3, r3, #5
 8002618:	2064      	movs	r0, #100	@ 0x64
 800261a:	fb00 f303 	mul.w	r3, r0, r3
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	3332      	adds	r3, #50	@ 0x32
 8002624:	4a15      	ldr	r2, [pc, #84]	@ (800267c <UART_SetConfig+0x118>)
 8002626:	fba2 2303 	umull	r2, r3, r2, r3
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002630:	4419      	add	r1, r3
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	009a      	lsls	r2, r3, #2
 800263c:	441a      	add	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	fbb2 f2f3 	udiv	r2, r2, r3
 8002648:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <UART_SetConfig+0x118>)
 800264a:	fba3 0302 	umull	r0, r3, r3, r2
 800264e:	095b      	lsrs	r3, r3, #5
 8002650:	2064      	movs	r0, #100	@ 0x64
 8002652:	fb00 f303 	mul.w	r3, r0, r3
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	011b      	lsls	r3, r3, #4
 800265a:	3332      	adds	r3, #50	@ 0x32
 800265c:	4a07      	ldr	r2, [pc, #28]	@ (800267c <UART_SetConfig+0x118>)
 800265e:	fba2 2303 	umull	r2, r3, r2, r3
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	f003 020f 	and.w	r2, r3, #15
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	440a      	add	r2, r1
 800266e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002670:	bf00      	nop
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40013800 	.word	0x40013800
 800267c:	51eb851f 	.word	0x51eb851f

08002680 <siprintf>:
 8002680:	b40e      	push	{r1, r2, r3}
 8002682:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002686:	b500      	push	{lr}
 8002688:	b09c      	sub	sp, #112	@ 0x70
 800268a:	ab1d      	add	r3, sp, #116	@ 0x74
 800268c:	9002      	str	r0, [sp, #8]
 800268e:	9006      	str	r0, [sp, #24]
 8002690:	9107      	str	r1, [sp, #28]
 8002692:	9104      	str	r1, [sp, #16]
 8002694:	4808      	ldr	r0, [pc, #32]	@ (80026b8 <siprintf+0x38>)
 8002696:	4909      	ldr	r1, [pc, #36]	@ (80026bc <siprintf+0x3c>)
 8002698:	f853 2b04 	ldr.w	r2, [r3], #4
 800269c:	9105      	str	r1, [sp, #20]
 800269e:	6800      	ldr	r0, [r0, #0]
 80026a0:	a902      	add	r1, sp, #8
 80026a2:	9301      	str	r3, [sp, #4]
 80026a4:	f000 f992 	bl	80029cc <_svfiprintf_r>
 80026a8:	2200      	movs	r2, #0
 80026aa:	9b02      	ldr	r3, [sp, #8]
 80026ac:	701a      	strb	r2, [r3, #0]
 80026ae:	b01c      	add	sp, #112	@ 0x70
 80026b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80026b4:	b003      	add	sp, #12
 80026b6:	4770      	bx	lr
 80026b8:	2000000c 	.word	0x2000000c
 80026bc:	ffff0208 	.word	0xffff0208

080026c0 <memset>:
 80026c0:	4603      	mov	r3, r0
 80026c2:	4402      	add	r2, r0
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d100      	bne.n	80026ca <memset+0xa>
 80026c8:	4770      	bx	lr
 80026ca:	f803 1b01 	strb.w	r1, [r3], #1
 80026ce:	e7f9      	b.n	80026c4 <memset+0x4>

080026d0 <__errno>:
 80026d0:	4b01      	ldr	r3, [pc, #4]	@ (80026d8 <__errno+0x8>)
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	2000000c 	.word	0x2000000c

080026dc <__libc_init_array>:
 80026dc:	b570      	push	{r4, r5, r6, lr}
 80026de:	2600      	movs	r6, #0
 80026e0:	4d0c      	ldr	r5, [pc, #48]	@ (8002714 <__libc_init_array+0x38>)
 80026e2:	4c0d      	ldr	r4, [pc, #52]	@ (8002718 <__libc_init_array+0x3c>)
 80026e4:	1b64      	subs	r4, r4, r5
 80026e6:	10a4      	asrs	r4, r4, #2
 80026e8:	42a6      	cmp	r6, r4
 80026ea:	d109      	bne.n	8002700 <__libc_init_array+0x24>
 80026ec:	f000 fc78 	bl	8002fe0 <_init>
 80026f0:	2600      	movs	r6, #0
 80026f2:	4d0a      	ldr	r5, [pc, #40]	@ (800271c <__libc_init_array+0x40>)
 80026f4:	4c0a      	ldr	r4, [pc, #40]	@ (8002720 <__libc_init_array+0x44>)
 80026f6:	1b64      	subs	r4, r4, r5
 80026f8:	10a4      	asrs	r4, r4, #2
 80026fa:	42a6      	cmp	r6, r4
 80026fc:	d105      	bne.n	800270a <__libc_init_array+0x2e>
 80026fe:	bd70      	pop	{r4, r5, r6, pc}
 8002700:	f855 3b04 	ldr.w	r3, [r5], #4
 8002704:	4798      	blx	r3
 8002706:	3601      	adds	r6, #1
 8002708:	e7ee      	b.n	80026e8 <__libc_init_array+0xc>
 800270a:	f855 3b04 	ldr.w	r3, [r5], #4
 800270e:	4798      	blx	r3
 8002710:	3601      	adds	r6, #1
 8002712:	e7f2      	b.n	80026fa <__libc_init_array+0x1e>
 8002714:	08003060 	.word	0x08003060
 8002718:	08003060 	.word	0x08003060
 800271c:	08003060 	.word	0x08003060
 8002720:	08003064 	.word	0x08003064

08002724 <__retarget_lock_acquire_recursive>:
 8002724:	4770      	bx	lr

08002726 <__retarget_lock_release_recursive>:
 8002726:	4770      	bx	lr

08002728 <_free_r>:
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	4605      	mov	r5, r0
 800272c:	2900      	cmp	r1, #0
 800272e:	d040      	beq.n	80027b2 <_free_r+0x8a>
 8002730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002734:	1f0c      	subs	r4, r1, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	bfb8      	it	lt
 800273a:	18e4      	addlt	r4, r4, r3
 800273c:	f000 f8de 	bl	80028fc <__malloc_lock>
 8002740:	4a1c      	ldr	r2, [pc, #112]	@ (80027b4 <_free_r+0x8c>)
 8002742:	6813      	ldr	r3, [r2, #0]
 8002744:	b933      	cbnz	r3, 8002754 <_free_r+0x2c>
 8002746:	6063      	str	r3, [r4, #4]
 8002748:	6014      	str	r4, [r2, #0]
 800274a:	4628      	mov	r0, r5
 800274c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002750:	f000 b8da 	b.w	8002908 <__malloc_unlock>
 8002754:	42a3      	cmp	r3, r4
 8002756:	d908      	bls.n	800276a <_free_r+0x42>
 8002758:	6820      	ldr	r0, [r4, #0]
 800275a:	1821      	adds	r1, r4, r0
 800275c:	428b      	cmp	r3, r1
 800275e:	bf01      	itttt	eq
 8002760:	6819      	ldreq	r1, [r3, #0]
 8002762:	685b      	ldreq	r3, [r3, #4]
 8002764:	1809      	addeq	r1, r1, r0
 8002766:	6021      	streq	r1, [r4, #0]
 8002768:	e7ed      	b.n	8002746 <_free_r+0x1e>
 800276a:	461a      	mov	r2, r3
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	b10b      	cbz	r3, 8002774 <_free_r+0x4c>
 8002770:	42a3      	cmp	r3, r4
 8002772:	d9fa      	bls.n	800276a <_free_r+0x42>
 8002774:	6811      	ldr	r1, [r2, #0]
 8002776:	1850      	adds	r0, r2, r1
 8002778:	42a0      	cmp	r0, r4
 800277a:	d10b      	bne.n	8002794 <_free_r+0x6c>
 800277c:	6820      	ldr	r0, [r4, #0]
 800277e:	4401      	add	r1, r0
 8002780:	1850      	adds	r0, r2, r1
 8002782:	4283      	cmp	r3, r0
 8002784:	6011      	str	r1, [r2, #0]
 8002786:	d1e0      	bne.n	800274a <_free_r+0x22>
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4408      	add	r0, r1
 800278e:	6010      	str	r0, [r2, #0]
 8002790:	6053      	str	r3, [r2, #4]
 8002792:	e7da      	b.n	800274a <_free_r+0x22>
 8002794:	d902      	bls.n	800279c <_free_r+0x74>
 8002796:	230c      	movs	r3, #12
 8002798:	602b      	str	r3, [r5, #0]
 800279a:	e7d6      	b.n	800274a <_free_r+0x22>
 800279c:	6820      	ldr	r0, [r4, #0]
 800279e:	1821      	adds	r1, r4, r0
 80027a0:	428b      	cmp	r3, r1
 80027a2:	bf01      	itttt	eq
 80027a4:	6819      	ldreq	r1, [r3, #0]
 80027a6:	685b      	ldreq	r3, [r3, #4]
 80027a8:	1809      	addeq	r1, r1, r0
 80027aa:	6021      	streq	r1, [r4, #0]
 80027ac:	6063      	str	r3, [r4, #4]
 80027ae:	6054      	str	r4, [r2, #4]
 80027b0:	e7cb      	b.n	800274a <_free_r+0x22>
 80027b2:	bd38      	pop	{r3, r4, r5, pc}
 80027b4:	20000254 	.word	0x20000254

080027b8 <sbrk_aligned>:
 80027b8:	b570      	push	{r4, r5, r6, lr}
 80027ba:	4e0f      	ldr	r6, [pc, #60]	@ (80027f8 <sbrk_aligned+0x40>)
 80027bc:	460c      	mov	r4, r1
 80027be:	6831      	ldr	r1, [r6, #0]
 80027c0:	4605      	mov	r5, r0
 80027c2:	b911      	cbnz	r1, 80027ca <sbrk_aligned+0x12>
 80027c4:	f000 fbaa 	bl	8002f1c <_sbrk_r>
 80027c8:	6030      	str	r0, [r6, #0]
 80027ca:	4621      	mov	r1, r4
 80027cc:	4628      	mov	r0, r5
 80027ce:	f000 fba5 	bl	8002f1c <_sbrk_r>
 80027d2:	1c43      	adds	r3, r0, #1
 80027d4:	d103      	bne.n	80027de <sbrk_aligned+0x26>
 80027d6:	f04f 34ff 	mov.w	r4, #4294967295
 80027da:	4620      	mov	r0, r4
 80027dc:	bd70      	pop	{r4, r5, r6, pc}
 80027de:	1cc4      	adds	r4, r0, #3
 80027e0:	f024 0403 	bic.w	r4, r4, #3
 80027e4:	42a0      	cmp	r0, r4
 80027e6:	d0f8      	beq.n	80027da <sbrk_aligned+0x22>
 80027e8:	1a21      	subs	r1, r4, r0
 80027ea:	4628      	mov	r0, r5
 80027ec:	f000 fb96 	bl	8002f1c <_sbrk_r>
 80027f0:	3001      	adds	r0, #1
 80027f2:	d1f2      	bne.n	80027da <sbrk_aligned+0x22>
 80027f4:	e7ef      	b.n	80027d6 <sbrk_aligned+0x1e>
 80027f6:	bf00      	nop
 80027f8:	20000250 	.word	0x20000250

080027fc <_malloc_r>:
 80027fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002800:	1ccd      	adds	r5, r1, #3
 8002802:	f025 0503 	bic.w	r5, r5, #3
 8002806:	3508      	adds	r5, #8
 8002808:	2d0c      	cmp	r5, #12
 800280a:	bf38      	it	cc
 800280c:	250c      	movcc	r5, #12
 800280e:	2d00      	cmp	r5, #0
 8002810:	4606      	mov	r6, r0
 8002812:	db01      	blt.n	8002818 <_malloc_r+0x1c>
 8002814:	42a9      	cmp	r1, r5
 8002816:	d904      	bls.n	8002822 <_malloc_r+0x26>
 8002818:	230c      	movs	r3, #12
 800281a:	6033      	str	r3, [r6, #0]
 800281c:	2000      	movs	r0, #0
 800281e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002822:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80028f8 <_malloc_r+0xfc>
 8002826:	f000 f869 	bl	80028fc <__malloc_lock>
 800282a:	f8d8 3000 	ldr.w	r3, [r8]
 800282e:	461c      	mov	r4, r3
 8002830:	bb44      	cbnz	r4, 8002884 <_malloc_r+0x88>
 8002832:	4629      	mov	r1, r5
 8002834:	4630      	mov	r0, r6
 8002836:	f7ff ffbf 	bl	80027b8 <sbrk_aligned>
 800283a:	1c43      	adds	r3, r0, #1
 800283c:	4604      	mov	r4, r0
 800283e:	d158      	bne.n	80028f2 <_malloc_r+0xf6>
 8002840:	f8d8 4000 	ldr.w	r4, [r8]
 8002844:	4627      	mov	r7, r4
 8002846:	2f00      	cmp	r7, #0
 8002848:	d143      	bne.n	80028d2 <_malloc_r+0xd6>
 800284a:	2c00      	cmp	r4, #0
 800284c:	d04b      	beq.n	80028e6 <_malloc_r+0xea>
 800284e:	6823      	ldr	r3, [r4, #0]
 8002850:	4639      	mov	r1, r7
 8002852:	4630      	mov	r0, r6
 8002854:	eb04 0903 	add.w	r9, r4, r3
 8002858:	f000 fb60 	bl	8002f1c <_sbrk_r>
 800285c:	4581      	cmp	r9, r0
 800285e:	d142      	bne.n	80028e6 <_malloc_r+0xea>
 8002860:	6821      	ldr	r1, [r4, #0]
 8002862:	4630      	mov	r0, r6
 8002864:	1a6d      	subs	r5, r5, r1
 8002866:	4629      	mov	r1, r5
 8002868:	f7ff ffa6 	bl	80027b8 <sbrk_aligned>
 800286c:	3001      	adds	r0, #1
 800286e:	d03a      	beq.n	80028e6 <_malloc_r+0xea>
 8002870:	6823      	ldr	r3, [r4, #0]
 8002872:	442b      	add	r3, r5
 8002874:	6023      	str	r3, [r4, #0]
 8002876:	f8d8 3000 	ldr.w	r3, [r8]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	bb62      	cbnz	r2, 80028d8 <_malloc_r+0xdc>
 800287e:	f8c8 7000 	str.w	r7, [r8]
 8002882:	e00f      	b.n	80028a4 <_malloc_r+0xa8>
 8002884:	6822      	ldr	r2, [r4, #0]
 8002886:	1b52      	subs	r2, r2, r5
 8002888:	d420      	bmi.n	80028cc <_malloc_r+0xd0>
 800288a:	2a0b      	cmp	r2, #11
 800288c:	d917      	bls.n	80028be <_malloc_r+0xc2>
 800288e:	1961      	adds	r1, r4, r5
 8002890:	42a3      	cmp	r3, r4
 8002892:	6025      	str	r5, [r4, #0]
 8002894:	bf18      	it	ne
 8002896:	6059      	strne	r1, [r3, #4]
 8002898:	6863      	ldr	r3, [r4, #4]
 800289a:	bf08      	it	eq
 800289c:	f8c8 1000 	streq.w	r1, [r8]
 80028a0:	5162      	str	r2, [r4, r5]
 80028a2:	604b      	str	r3, [r1, #4]
 80028a4:	4630      	mov	r0, r6
 80028a6:	f000 f82f 	bl	8002908 <__malloc_unlock>
 80028aa:	f104 000b 	add.w	r0, r4, #11
 80028ae:	1d23      	adds	r3, r4, #4
 80028b0:	f020 0007 	bic.w	r0, r0, #7
 80028b4:	1ac2      	subs	r2, r0, r3
 80028b6:	bf1c      	itt	ne
 80028b8:	1a1b      	subne	r3, r3, r0
 80028ba:	50a3      	strne	r3, [r4, r2]
 80028bc:	e7af      	b.n	800281e <_malloc_r+0x22>
 80028be:	6862      	ldr	r2, [r4, #4]
 80028c0:	42a3      	cmp	r3, r4
 80028c2:	bf0c      	ite	eq
 80028c4:	f8c8 2000 	streq.w	r2, [r8]
 80028c8:	605a      	strne	r2, [r3, #4]
 80028ca:	e7eb      	b.n	80028a4 <_malloc_r+0xa8>
 80028cc:	4623      	mov	r3, r4
 80028ce:	6864      	ldr	r4, [r4, #4]
 80028d0:	e7ae      	b.n	8002830 <_malloc_r+0x34>
 80028d2:	463c      	mov	r4, r7
 80028d4:	687f      	ldr	r7, [r7, #4]
 80028d6:	e7b6      	b.n	8002846 <_malloc_r+0x4a>
 80028d8:	461a      	mov	r2, r3
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	42a3      	cmp	r3, r4
 80028de:	d1fb      	bne.n	80028d8 <_malloc_r+0xdc>
 80028e0:	2300      	movs	r3, #0
 80028e2:	6053      	str	r3, [r2, #4]
 80028e4:	e7de      	b.n	80028a4 <_malloc_r+0xa8>
 80028e6:	230c      	movs	r3, #12
 80028e8:	4630      	mov	r0, r6
 80028ea:	6033      	str	r3, [r6, #0]
 80028ec:	f000 f80c 	bl	8002908 <__malloc_unlock>
 80028f0:	e794      	b.n	800281c <_malloc_r+0x20>
 80028f2:	6005      	str	r5, [r0, #0]
 80028f4:	e7d6      	b.n	80028a4 <_malloc_r+0xa8>
 80028f6:	bf00      	nop
 80028f8:	20000254 	.word	0x20000254

080028fc <__malloc_lock>:
 80028fc:	4801      	ldr	r0, [pc, #4]	@ (8002904 <__malloc_lock+0x8>)
 80028fe:	f7ff bf11 	b.w	8002724 <__retarget_lock_acquire_recursive>
 8002902:	bf00      	nop
 8002904:	2000024c 	.word	0x2000024c

08002908 <__malloc_unlock>:
 8002908:	4801      	ldr	r0, [pc, #4]	@ (8002910 <__malloc_unlock+0x8>)
 800290a:	f7ff bf0c 	b.w	8002726 <__retarget_lock_release_recursive>
 800290e:	bf00      	nop
 8002910:	2000024c 	.word	0x2000024c

08002914 <__ssputs_r>:
 8002914:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002918:	461f      	mov	r7, r3
 800291a:	688e      	ldr	r6, [r1, #8]
 800291c:	4682      	mov	sl, r0
 800291e:	42be      	cmp	r6, r7
 8002920:	460c      	mov	r4, r1
 8002922:	4690      	mov	r8, r2
 8002924:	680b      	ldr	r3, [r1, #0]
 8002926:	d82d      	bhi.n	8002984 <__ssputs_r+0x70>
 8002928:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800292c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002930:	d026      	beq.n	8002980 <__ssputs_r+0x6c>
 8002932:	6965      	ldr	r5, [r4, #20]
 8002934:	6909      	ldr	r1, [r1, #16]
 8002936:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800293a:	eba3 0901 	sub.w	r9, r3, r1
 800293e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002942:	1c7b      	adds	r3, r7, #1
 8002944:	444b      	add	r3, r9
 8002946:	106d      	asrs	r5, r5, #1
 8002948:	429d      	cmp	r5, r3
 800294a:	bf38      	it	cc
 800294c:	461d      	movcc	r5, r3
 800294e:	0553      	lsls	r3, r2, #21
 8002950:	d527      	bpl.n	80029a2 <__ssputs_r+0x8e>
 8002952:	4629      	mov	r1, r5
 8002954:	f7ff ff52 	bl	80027fc <_malloc_r>
 8002958:	4606      	mov	r6, r0
 800295a:	b360      	cbz	r0, 80029b6 <__ssputs_r+0xa2>
 800295c:	464a      	mov	r2, r9
 800295e:	6921      	ldr	r1, [r4, #16]
 8002960:	f000 fafa 	bl	8002f58 <memcpy>
 8002964:	89a3      	ldrh	r3, [r4, #12]
 8002966:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800296a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800296e:	81a3      	strh	r3, [r4, #12]
 8002970:	6126      	str	r6, [r4, #16]
 8002972:	444e      	add	r6, r9
 8002974:	6026      	str	r6, [r4, #0]
 8002976:	463e      	mov	r6, r7
 8002978:	6165      	str	r5, [r4, #20]
 800297a:	eba5 0509 	sub.w	r5, r5, r9
 800297e:	60a5      	str	r5, [r4, #8]
 8002980:	42be      	cmp	r6, r7
 8002982:	d900      	bls.n	8002986 <__ssputs_r+0x72>
 8002984:	463e      	mov	r6, r7
 8002986:	4632      	mov	r2, r6
 8002988:	4641      	mov	r1, r8
 800298a:	6820      	ldr	r0, [r4, #0]
 800298c:	f000 faac 	bl	8002ee8 <memmove>
 8002990:	2000      	movs	r0, #0
 8002992:	68a3      	ldr	r3, [r4, #8]
 8002994:	1b9b      	subs	r3, r3, r6
 8002996:	60a3      	str	r3, [r4, #8]
 8002998:	6823      	ldr	r3, [r4, #0]
 800299a:	4433      	add	r3, r6
 800299c:	6023      	str	r3, [r4, #0]
 800299e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029a2:	462a      	mov	r2, r5
 80029a4:	f000 fae6 	bl	8002f74 <_realloc_r>
 80029a8:	4606      	mov	r6, r0
 80029aa:	2800      	cmp	r0, #0
 80029ac:	d1e0      	bne.n	8002970 <__ssputs_r+0x5c>
 80029ae:	4650      	mov	r0, sl
 80029b0:	6921      	ldr	r1, [r4, #16]
 80029b2:	f7ff feb9 	bl	8002728 <_free_r>
 80029b6:	230c      	movs	r3, #12
 80029b8:	f8ca 3000 	str.w	r3, [sl]
 80029bc:	89a3      	ldrh	r3, [r4, #12]
 80029be:	f04f 30ff 	mov.w	r0, #4294967295
 80029c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029c6:	81a3      	strh	r3, [r4, #12]
 80029c8:	e7e9      	b.n	800299e <__ssputs_r+0x8a>
	...

080029cc <_svfiprintf_r>:
 80029cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029d0:	4698      	mov	r8, r3
 80029d2:	898b      	ldrh	r3, [r1, #12]
 80029d4:	4607      	mov	r7, r0
 80029d6:	061b      	lsls	r3, r3, #24
 80029d8:	460d      	mov	r5, r1
 80029da:	4614      	mov	r4, r2
 80029dc:	b09d      	sub	sp, #116	@ 0x74
 80029de:	d510      	bpl.n	8002a02 <_svfiprintf_r+0x36>
 80029e0:	690b      	ldr	r3, [r1, #16]
 80029e2:	b973      	cbnz	r3, 8002a02 <_svfiprintf_r+0x36>
 80029e4:	2140      	movs	r1, #64	@ 0x40
 80029e6:	f7ff ff09 	bl	80027fc <_malloc_r>
 80029ea:	6028      	str	r0, [r5, #0]
 80029ec:	6128      	str	r0, [r5, #16]
 80029ee:	b930      	cbnz	r0, 80029fe <_svfiprintf_r+0x32>
 80029f0:	230c      	movs	r3, #12
 80029f2:	603b      	str	r3, [r7, #0]
 80029f4:	f04f 30ff 	mov.w	r0, #4294967295
 80029f8:	b01d      	add	sp, #116	@ 0x74
 80029fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029fe:	2340      	movs	r3, #64	@ 0x40
 8002a00:	616b      	str	r3, [r5, #20]
 8002a02:	2300      	movs	r3, #0
 8002a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a06:	2320      	movs	r3, #32
 8002a08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a0c:	2330      	movs	r3, #48	@ 0x30
 8002a0e:	f04f 0901 	mov.w	r9, #1
 8002a12:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a16:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002bb0 <_svfiprintf_r+0x1e4>
 8002a1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a1e:	4623      	mov	r3, r4
 8002a20:	469a      	mov	sl, r3
 8002a22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a26:	b10a      	cbz	r2, 8002a2c <_svfiprintf_r+0x60>
 8002a28:	2a25      	cmp	r2, #37	@ 0x25
 8002a2a:	d1f9      	bne.n	8002a20 <_svfiprintf_r+0x54>
 8002a2c:	ebba 0b04 	subs.w	fp, sl, r4
 8002a30:	d00b      	beq.n	8002a4a <_svfiprintf_r+0x7e>
 8002a32:	465b      	mov	r3, fp
 8002a34:	4622      	mov	r2, r4
 8002a36:	4629      	mov	r1, r5
 8002a38:	4638      	mov	r0, r7
 8002a3a:	f7ff ff6b 	bl	8002914 <__ssputs_r>
 8002a3e:	3001      	adds	r0, #1
 8002a40:	f000 80a7 	beq.w	8002b92 <_svfiprintf_r+0x1c6>
 8002a44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a46:	445a      	add	r2, fp
 8002a48:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a4a:	f89a 3000 	ldrb.w	r3, [sl]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f000 809f 	beq.w	8002b92 <_svfiprintf_r+0x1c6>
 8002a54:	2300      	movs	r3, #0
 8002a56:	f04f 32ff 	mov.w	r2, #4294967295
 8002a5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a5e:	f10a 0a01 	add.w	sl, sl, #1
 8002a62:	9304      	str	r3, [sp, #16]
 8002a64:	9307      	str	r3, [sp, #28]
 8002a66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002a6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8002a6c:	4654      	mov	r4, sl
 8002a6e:	2205      	movs	r2, #5
 8002a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a74:	484e      	ldr	r0, [pc, #312]	@ (8002bb0 <_svfiprintf_r+0x1e4>)
 8002a76:	f000 fa61 	bl	8002f3c <memchr>
 8002a7a:	9a04      	ldr	r2, [sp, #16]
 8002a7c:	b9d8      	cbnz	r0, 8002ab6 <_svfiprintf_r+0xea>
 8002a7e:	06d0      	lsls	r0, r2, #27
 8002a80:	bf44      	itt	mi
 8002a82:	2320      	movmi	r3, #32
 8002a84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a88:	0711      	lsls	r1, r2, #28
 8002a8a:	bf44      	itt	mi
 8002a8c:	232b      	movmi	r3, #43	@ 0x2b
 8002a8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a92:	f89a 3000 	ldrb.w	r3, [sl]
 8002a96:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a98:	d015      	beq.n	8002ac6 <_svfiprintf_r+0xfa>
 8002a9a:	4654      	mov	r4, sl
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f04f 0c0a 	mov.w	ip, #10
 8002aa2:	9a07      	ldr	r2, [sp, #28]
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002aaa:	3b30      	subs	r3, #48	@ 0x30
 8002aac:	2b09      	cmp	r3, #9
 8002aae:	d94b      	bls.n	8002b48 <_svfiprintf_r+0x17c>
 8002ab0:	b1b0      	cbz	r0, 8002ae0 <_svfiprintf_r+0x114>
 8002ab2:	9207      	str	r2, [sp, #28]
 8002ab4:	e014      	b.n	8002ae0 <_svfiprintf_r+0x114>
 8002ab6:	eba0 0308 	sub.w	r3, r0, r8
 8002aba:	fa09 f303 	lsl.w	r3, r9, r3
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	46a2      	mov	sl, r4
 8002ac2:	9304      	str	r3, [sp, #16]
 8002ac4:	e7d2      	b.n	8002a6c <_svfiprintf_r+0xa0>
 8002ac6:	9b03      	ldr	r3, [sp, #12]
 8002ac8:	1d19      	adds	r1, r3, #4
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	9103      	str	r1, [sp, #12]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	bfbb      	ittet	lt
 8002ad2:	425b      	neglt	r3, r3
 8002ad4:	f042 0202 	orrlt.w	r2, r2, #2
 8002ad8:	9307      	strge	r3, [sp, #28]
 8002ada:	9307      	strlt	r3, [sp, #28]
 8002adc:	bfb8      	it	lt
 8002ade:	9204      	strlt	r2, [sp, #16]
 8002ae0:	7823      	ldrb	r3, [r4, #0]
 8002ae2:	2b2e      	cmp	r3, #46	@ 0x2e
 8002ae4:	d10a      	bne.n	8002afc <_svfiprintf_r+0x130>
 8002ae6:	7863      	ldrb	r3, [r4, #1]
 8002ae8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002aea:	d132      	bne.n	8002b52 <_svfiprintf_r+0x186>
 8002aec:	9b03      	ldr	r3, [sp, #12]
 8002aee:	3402      	adds	r4, #2
 8002af0:	1d1a      	adds	r2, r3, #4
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	9203      	str	r2, [sp, #12]
 8002af6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002afa:	9305      	str	r3, [sp, #20]
 8002afc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002bb4 <_svfiprintf_r+0x1e8>
 8002b00:	2203      	movs	r2, #3
 8002b02:	4650      	mov	r0, sl
 8002b04:	7821      	ldrb	r1, [r4, #0]
 8002b06:	f000 fa19 	bl	8002f3c <memchr>
 8002b0a:	b138      	cbz	r0, 8002b1c <_svfiprintf_r+0x150>
 8002b0c:	2240      	movs	r2, #64	@ 0x40
 8002b0e:	9b04      	ldr	r3, [sp, #16]
 8002b10:	eba0 000a 	sub.w	r0, r0, sl
 8002b14:	4082      	lsls	r2, r0
 8002b16:	4313      	orrs	r3, r2
 8002b18:	3401      	adds	r4, #1
 8002b1a:	9304      	str	r3, [sp, #16]
 8002b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b20:	2206      	movs	r2, #6
 8002b22:	4825      	ldr	r0, [pc, #148]	@ (8002bb8 <_svfiprintf_r+0x1ec>)
 8002b24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002b28:	f000 fa08 	bl	8002f3c <memchr>
 8002b2c:	2800      	cmp	r0, #0
 8002b2e:	d036      	beq.n	8002b9e <_svfiprintf_r+0x1d2>
 8002b30:	4b22      	ldr	r3, [pc, #136]	@ (8002bbc <_svfiprintf_r+0x1f0>)
 8002b32:	bb1b      	cbnz	r3, 8002b7c <_svfiprintf_r+0x1b0>
 8002b34:	9b03      	ldr	r3, [sp, #12]
 8002b36:	3307      	adds	r3, #7
 8002b38:	f023 0307 	bic.w	r3, r3, #7
 8002b3c:	3308      	adds	r3, #8
 8002b3e:	9303      	str	r3, [sp, #12]
 8002b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b42:	4433      	add	r3, r6
 8002b44:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b46:	e76a      	b.n	8002a1e <_svfiprintf_r+0x52>
 8002b48:	460c      	mov	r4, r1
 8002b4a:	2001      	movs	r0, #1
 8002b4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b50:	e7a8      	b.n	8002aa4 <_svfiprintf_r+0xd8>
 8002b52:	2300      	movs	r3, #0
 8002b54:	f04f 0c0a 	mov.w	ip, #10
 8002b58:	4619      	mov	r1, r3
 8002b5a:	3401      	adds	r4, #1
 8002b5c:	9305      	str	r3, [sp, #20]
 8002b5e:	4620      	mov	r0, r4
 8002b60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b64:	3a30      	subs	r2, #48	@ 0x30
 8002b66:	2a09      	cmp	r2, #9
 8002b68:	d903      	bls.n	8002b72 <_svfiprintf_r+0x1a6>
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d0c6      	beq.n	8002afc <_svfiprintf_r+0x130>
 8002b6e:	9105      	str	r1, [sp, #20]
 8002b70:	e7c4      	b.n	8002afc <_svfiprintf_r+0x130>
 8002b72:	4604      	mov	r4, r0
 8002b74:	2301      	movs	r3, #1
 8002b76:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b7a:	e7f0      	b.n	8002b5e <_svfiprintf_r+0x192>
 8002b7c:	ab03      	add	r3, sp, #12
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	462a      	mov	r2, r5
 8002b82:	4638      	mov	r0, r7
 8002b84:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc0 <_svfiprintf_r+0x1f4>)
 8002b86:	a904      	add	r1, sp, #16
 8002b88:	f3af 8000 	nop.w
 8002b8c:	1c42      	adds	r2, r0, #1
 8002b8e:	4606      	mov	r6, r0
 8002b90:	d1d6      	bne.n	8002b40 <_svfiprintf_r+0x174>
 8002b92:	89ab      	ldrh	r3, [r5, #12]
 8002b94:	065b      	lsls	r3, r3, #25
 8002b96:	f53f af2d 	bmi.w	80029f4 <_svfiprintf_r+0x28>
 8002b9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002b9c:	e72c      	b.n	80029f8 <_svfiprintf_r+0x2c>
 8002b9e:	ab03      	add	r3, sp, #12
 8002ba0:	9300      	str	r3, [sp, #0]
 8002ba2:	462a      	mov	r2, r5
 8002ba4:	4638      	mov	r0, r7
 8002ba6:	4b06      	ldr	r3, [pc, #24]	@ (8002bc0 <_svfiprintf_r+0x1f4>)
 8002ba8:	a904      	add	r1, sp, #16
 8002baa:	f000 f87d 	bl	8002ca8 <_printf_i>
 8002bae:	e7ed      	b.n	8002b8c <_svfiprintf_r+0x1c0>
 8002bb0:	0800302a 	.word	0x0800302a
 8002bb4:	08003030 	.word	0x08003030
 8002bb8:	08003034 	.word	0x08003034
 8002bbc:	00000000 	.word	0x00000000
 8002bc0:	08002915 	.word	0x08002915

08002bc4 <_printf_common>:
 8002bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002bc8:	4616      	mov	r6, r2
 8002bca:	4698      	mov	r8, r3
 8002bcc:	688a      	ldr	r2, [r1, #8]
 8002bce:	690b      	ldr	r3, [r1, #16]
 8002bd0:	4607      	mov	r7, r0
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	bfb8      	it	lt
 8002bd6:	4613      	movlt	r3, r2
 8002bd8:	6033      	str	r3, [r6, #0]
 8002bda:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002bde:	460c      	mov	r4, r1
 8002be0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002be4:	b10a      	cbz	r2, 8002bea <_printf_common+0x26>
 8002be6:	3301      	adds	r3, #1
 8002be8:	6033      	str	r3, [r6, #0]
 8002bea:	6823      	ldr	r3, [r4, #0]
 8002bec:	0699      	lsls	r1, r3, #26
 8002bee:	bf42      	ittt	mi
 8002bf0:	6833      	ldrmi	r3, [r6, #0]
 8002bf2:	3302      	addmi	r3, #2
 8002bf4:	6033      	strmi	r3, [r6, #0]
 8002bf6:	6825      	ldr	r5, [r4, #0]
 8002bf8:	f015 0506 	ands.w	r5, r5, #6
 8002bfc:	d106      	bne.n	8002c0c <_printf_common+0x48>
 8002bfe:	f104 0a19 	add.w	sl, r4, #25
 8002c02:	68e3      	ldr	r3, [r4, #12]
 8002c04:	6832      	ldr	r2, [r6, #0]
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	42ab      	cmp	r3, r5
 8002c0a:	dc2b      	bgt.n	8002c64 <_printf_common+0xa0>
 8002c0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002c10:	6822      	ldr	r2, [r4, #0]
 8002c12:	3b00      	subs	r3, #0
 8002c14:	bf18      	it	ne
 8002c16:	2301      	movne	r3, #1
 8002c18:	0692      	lsls	r2, r2, #26
 8002c1a:	d430      	bmi.n	8002c7e <_printf_common+0xba>
 8002c1c:	4641      	mov	r1, r8
 8002c1e:	4638      	mov	r0, r7
 8002c20:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002c24:	47c8      	blx	r9
 8002c26:	3001      	adds	r0, #1
 8002c28:	d023      	beq.n	8002c72 <_printf_common+0xae>
 8002c2a:	6823      	ldr	r3, [r4, #0]
 8002c2c:	6922      	ldr	r2, [r4, #16]
 8002c2e:	f003 0306 	and.w	r3, r3, #6
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	bf14      	ite	ne
 8002c36:	2500      	movne	r5, #0
 8002c38:	6833      	ldreq	r3, [r6, #0]
 8002c3a:	f04f 0600 	mov.w	r6, #0
 8002c3e:	bf08      	it	eq
 8002c40:	68e5      	ldreq	r5, [r4, #12]
 8002c42:	f104 041a 	add.w	r4, r4, #26
 8002c46:	bf08      	it	eq
 8002c48:	1aed      	subeq	r5, r5, r3
 8002c4a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002c4e:	bf08      	it	eq
 8002c50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002c54:	4293      	cmp	r3, r2
 8002c56:	bfc4      	itt	gt
 8002c58:	1a9b      	subgt	r3, r3, r2
 8002c5a:	18ed      	addgt	r5, r5, r3
 8002c5c:	42b5      	cmp	r5, r6
 8002c5e:	d11a      	bne.n	8002c96 <_printf_common+0xd2>
 8002c60:	2000      	movs	r0, #0
 8002c62:	e008      	b.n	8002c76 <_printf_common+0xb2>
 8002c64:	2301      	movs	r3, #1
 8002c66:	4652      	mov	r2, sl
 8002c68:	4641      	mov	r1, r8
 8002c6a:	4638      	mov	r0, r7
 8002c6c:	47c8      	blx	r9
 8002c6e:	3001      	adds	r0, #1
 8002c70:	d103      	bne.n	8002c7a <_printf_common+0xb6>
 8002c72:	f04f 30ff 	mov.w	r0, #4294967295
 8002c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c7a:	3501      	adds	r5, #1
 8002c7c:	e7c1      	b.n	8002c02 <_printf_common+0x3e>
 8002c7e:	2030      	movs	r0, #48	@ 0x30
 8002c80:	18e1      	adds	r1, r4, r3
 8002c82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002c8c:	4422      	add	r2, r4
 8002c8e:	3302      	adds	r3, #2
 8002c90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002c94:	e7c2      	b.n	8002c1c <_printf_common+0x58>
 8002c96:	2301      	movs	r3, #1
 8002c98:	4622      	mov	r2, r4
 8002c9a:	4641      	mov	r1, r8
 8002c9c:	4638      	mov	r0, r7
 8002c9e:	47c8      	blx	r9
 8002ca0:	3001      	adds	r0, #1
 8002ca2:	d0e6      	beq.n	8002c72 <_printf_common+0xae>
 8002ca4:	3601      	adds	r6, #1
 8002ca6:	e7d9      	b.n	8002c5c <_printf_common+0x98>

08002ca8 <_printf_i>:
 8002ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cac:	7e0f      	ldrb	r7, [r1, #24]
 8002cae:	4691      	mov	r9, r2
 8002cb0:	2f78      	cmp	r7, #120	@ 0x78
 8002cb2:	4680      	mov	r8, r0
 8002cb4:	460c      	mov	r4, r1
 8002cb6:	469a      	mov	sl, r3
 8002cb8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002cba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002cbe:	d807      	bhi.n	8002cd0 <_printf_i+0x28>
 8002cc0:	2f62      	cmp	r7, #98	@ 0x62
 8002cc2:	d80a      	bhi.n	8002cda <_printf_i+0x32>
 8002cc4:	2f00      	cmp	r7, #0
 8002cc6:	f000 80d3 	beq.w	8002e70 <_printf_i+0x1c8>
 8002cca:	2f58      	cmp	r7, #88	@ 0x58
 8002ccc:	f000 80ba 	beq.w	8002e44 <_printf_i+0x19c>
 8002cd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002cd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002cd8:	e03a      	b.n	8002d50 <_printf_i+0xa8>
 8002cda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002cde:	2b15      	cmp	r3, #21
 8002ce0:	d8f6      	bhi.n	8002cd0 <_printf_i+0x28>
 8002ce2:	a101      	add	r1, pc, #4	@ (adr r1, 8002ce8 <_printf_i+0x40>)
 8002ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002ce8:	08002d41 	.word	0x08002d41
 8002cec:	08002d55 	.word	0x08002d55
 8002cf0:	08002cd1 	.word	0x08002cd1
 8002cf4:	08002cd1 	.word	0x08002cd1
 8002cf8:	08002cd1 	.word	0x08002cd1
 8002cfc:	08002cd1 	.word	0x08002cd1
 8002d00:	08002d55 	.word	0x08002d55
 8002d04:	08002cd1 	.word	0x08002cd1
 8002d08:	08002cd1 	.word	0x08002cd1
 8002d0c:	08002cd1 	.word	0x08002cd1
 8002d10:	08002cd1 	.word	0x08002cd1
 8002d14:	08002e57 	.word	0x08002e57
 8002d18:	08002d7f 	.word	0x08002d7f
 8002d1c:	08002e11 	.word	0x08002e11
 8002d20:	08002cd1 	.word	0x08002cd1
 8002d24:	08002cd1 	.word	0x08002cd1
 8002d28:	08002e79 	.word	0x08002e79
 8002d2c:	08002cd1 	.word	0x08002cd1
 8002d30:	08002d7f 	.word	0x08002d7f
 8002d34:	08002cd1 	.word	0x08002cd1
 8002d38:	08002cd1 	.word	0x08002cd1
 8002d3c:	08002e19 	.word	0x08002e19
 8002d40:	6833      	ldr	r3, [r6, #0]
 8002d42:	1d1a      	adds	r2, r3, #4
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6032      	str	r2, [r6, #0]
 8002d48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002d4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002d50:	2301      	movs	r3, #1
 8002d52:	e09e      	b.n	8002e92 <_printf_i+0x1ea>
 8002d54:	6833      	ldr	r3, [r6, #0]
 8002d56:	6820      	ldr	r0, [r4, #0]
 8002d58:	1d19      	adds	r1, r3, #4
 8002d5a:	6031      	str	r1, [r6, #0]
 8002d5c:	0606      	lsls	r6, r0, #24
 8002d5e:	d501      	bpl.n	8002d64 <_printf_i+0xbc>
 8002d60:	681d      	ldr	r5, [r3, #0]
 8002d62:	e003      	b.n	8002d6c <_printf_i+0xc4>
 8002d64:	0645      	lsls	r5, r0, #25
 8002d66:	d5fb      	bpl.n	8002d60 <_printf_i+0xb8>
 8002d68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002d6c:	2d00      	cmp	r5, #0
 8002d6e:	da03      	bge.n	8002d78 <_printf_i+0xd0>
 8002d70:	232d      	movs	r3, #45	@ 0x2d
 8002d72:	426d      	negs	r5, r5
 8002d74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d78:	230a      	movs	r3, #10
 8002d7a:	4859      	ldr	r0, [pc, #356]	@ (8002ee0 <_printf_i+0x238>)
 8002d7c:	e011      	b.n	8002da2 <_printf_i+0xfa>
 8002d7e:	6821      	ldr	r1, [r4, #0]
 8002d80:	6833      	ldr	r3, [r6, #0]
 8002d82:	0608      	lsls	r0, r1, #24
 8002d84:	f853 5b04 	ldr.w	r5, [r3], #4
 8002d88:	d402      	bmi.n	8002d90 <_printf_i+0xe8>
 8002d8a:	0649      	lsls	r1, r1, #25
 8002d8c:	bf48      	it	mi
 8002d8e:	b2ad      	uxthmi	r5, r5
 8002d90:	2f6f      	cmp	r7, #111	@ 0x6f
 8002d92:	6033      	str	r3, [r6, #0]
 8002d94:	bf14      	ite	ne
 8002d96:	230a      	movne	r3, #10
 8002d98:	2308      	moveq	r3, #8
 8002d9a:	4851      	ldr	r0, [pc, #324]	@ (8002ee0 <_printf_i+0x238>)
 8002d9c:	2100      	movs	r1, #0
 8002d9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002da2:	6866      	ldr	r6, [r4, #4]
 8002da4:	2e00      	cmp	r6, #0
 8002da6:	bfa8      	it	ge
 8002da8:	6821      	ldrge	r1, [r4, #0]
 8002daa:	60a6      	str	r6, [r4, #8]
 8002dac:	bfa4      	itt	ge
 8002dae:	f021 0104 	bicge.w	r1, r1, #4
 8002db2:	6021      	strge	r1, [r4, #0]
 8002db4:	b90d      	cbnz	r5, 8002dba <_printf_i+0x112>
 8002db6:	2e00      	cmp	r6, #0
 8002db8:	d04b      	beq.n	8002e52 <_printf_i+0x1aa>
 8002dba:	4616      	mov	r6, r2
 8002dbc:	fbb5 f1f3 	udiv	r1, r5, r3
 8002dc0:	fb03 5711 	mls	r7, r3, r1, r5
 8002dc4:	5dc7      	ldrb	r7, [r0, r7]
 8002dc6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002dca:	462f      	mov	r7, r5
 8002dcc:	42bb      	cmp	r3, r7
 8002dce:	460d      	mov	r5, r1
 8002dd0:	d9f4      	bls.n	8002dbc <_printf_i+0x114>
 8002dd2:	2b08      	cmp	r3, #8
 8002dd4:	d10b      	bne.n	8002dee <_printf_i+0x146>
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	07df      	lsls	r7, r3, #31
 8002dda:	d508      	bpl.n	8002dee <_printf_i+0x146>
 8002ddc:	6923      	ldr	r3, [r4, #16]
 8002dde:	6861      	ldr	r1, [r4, #4]
 8002de0:	4299      	cmp	r1, r3
 8002de2:	bfde      	ittt	le
 8002de4:	2330      	movle	r3, #48	@ 0x30
 8002de6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002dea:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002dee:	1b92      	subs	r2, r2, r6
 8002df0:	6122      	str	r2, [r4, #16]
 8002df2:	464b      	mov	r3, r9
 8002df4:	4621      	mov	r1, r4
 8002df6:	4640      	mov	r0, r8
 8002df8:	f8cd a000 	str.w	sl, [sp]
 8002dfc:	aa03      	add	r2, sp, #12
 8002dfe:	f7ff fee1 	bl	8002bc4 <_printf_common>
 8002e02:	3001      	adds	r0, #1
 8002e04:	d14a      	bne.n	8002e9c <_printf_i+0x1f4>
 8002e06:	f04f 30ff 	mov.w	r0, #4294967295
 8002e0a:	b004      	add	sp, #16
 8002e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e10:	6823      	ldr	r3, [r4, #0]
 8002e12:	f043 0320 	orr.w	r3, r3, #32
 8002e16:	6023      	str	r3, [r4, #0]
 8002e18:	2778      	movs	r7, #120	@ 0x78
 8002e1a:	4832      	ldr	r0, [pc, #200]	@ (8002ee4 <_printf_i+0x23c>)
 8002e1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002e20:	6823      	ldr	r3, [r4, #0]
 8002e22:	6831      	ldr	r1, [r6, #0]
 8002e24:	061f      	lsls	r7, r3, #24
 8002e26:	f851 5b04 	ldr.w	r5, [r1], #4
 8002e2a:	d402      	bmi.n	8002e32 <_printf_i+0x18a>
 8002e2c:	065f      	lsls	r7, r3, #25
 8002e2e:	bf48      	it	mi
 8002e30:	b2ad      	uxthmi	r5, r5
 8002e32:	6031      	str	r1, [r6, #0]
 8002e34:	07d9      	lsls	r1, r3, #31
 8002e36:	bf44      	itt	mi
 8002e38:	f043 0320 	orrmi.w	r3, r3, #32
 8002e3c:	6023      	strmi	r3, [r4, #0]
 8002e3e:	b11d      	cbz	r5, 8002e48 <_printf_i+0x1a0>
 8002e40:	2310      	movs	r3, #16
 8002e42:	e7ab      	b.n	8002d9c <_printf_i+0xf4>
 8002e44:	4826      	ldr	r0, [pc, #152]	@ (8002ee0 <_printf_i+0x238>)
 8002e46:	e7e9      	b.n	8002e1c <_printf_i+0x174>
 8002e48:	6823      	ldr	r3, [r4, #0]
 8002e4a:	f023 0320 	bic.w	r3, r3, #32
 8002e4e:	6023      	str	r3, [r4, #0]
 8002e50:	e7f6      	b.n	8002e40 <_printf_i+0x198>
 8002e52:	4616      	mov	r6, r2
 8002e54:	e7bd      	b.n	8002dd2 <_printf_i+0x12a>
 8002e56:	6833      	ldr	r3, [r6, #0]
 8002e58:	6825      	ldr	r5, [r4, #0]
 8002e5a:	1d18      	adds	r0, r3, #4
 8002e5c:	6961      	ldr	r1, [r4, #20]
 8002e5e:	6030      	str	r0, [r6, #0]
 8002e60:	062e      	lsls	r6, r5, #24
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	d501      	bpl.n	8002e6a <_printf_i+0x1c2>
 8002e66:	6019      	str	r1, [r3, #0]
 8002e68:	e002      	b.n	8002e70 <_printf_i+0x1c8>
 8002e6a:	0668      	lsls	r0, r5, #25
 8002e6c:	d5fb      	bpl.n	8002e66 <_printf_i+0x1be>
 8002e6e:	8019      	strh	r1, [r3, #0]
 8002e70:	2300      	movs	r3, #0
 8002e72:	4616      	mov	r6, r2
 8002e74:	6123      	str	r3, [r4, #16]
 8002e76:	e7bc      	b.n	8002df2 <_printf_i+0x14a>
 8002e78:	6833      	ldr	r3, [r6, #0]
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	1d1a      	adds	r2, r3, #4
 8002e7e:	6032      	str	r2, [r6, #0]
 8002e80:	681e      	ldr	r6, [r3, #0]
 8002e82:	6862      	ldr	r2, [r4, #4]
 8002e84:	4630      	mov	r0, r6
 8002e86:	f000 f859 	bl	8002f3c <memchr>
 8002e8a:	b108      	cbz	r0, 8002e90 <_printf_i+0x1e8>
 8002e8c:	1b80      	subs	r0, r0, r6
 8002e8e:	6060      	str	r0, [r4, #4]
 8002e90:	6863      	ldr	r3, [r4, #4]
 8002e92:	6123      	str	r3, [r4, #16]
 8002e94:	2300      	movs	r3, #0
 8002e96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e9a:	e7aa      	b.n	8002df2 <_printf_i+0x14a>
 8002e9c:	4632      	mov	r2, r6
 8002e9e:	4649      	mov	r1, r9
 8002ea0:	4640      	mov	r0, r8
 8002ea2:	6923      	ldr	r3, [r4, #16]
 8002ea4:	47d0      	blx	sl
 8002ea6:	3001      	adds	r0, #1
 8002ea8:	d0ad      	beq.n	8002e06 <_printf_i+0x15e>
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	079b      	lsls	r3, r3, #30
 8002eae:	d413      	bmi.n	8002ed8 <_printf_i+0x230>
 8002eb0:	68e0      	ldr	r0, [r4, #12]
 8002eb2:	9b03      	ldr	r3, [sp, #12]
 8002eb4:	4298      	cmp	r0, r3
 8002eb6:	bfb8      	it	lt
 8002eb8:	4618      	movlt	r0, r3
 8002eba:	e7a6      	b.n	8002e0a <_printf_i+0x162>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	4632      	mov	r2, r6
 8002ec0:	4649      	mov	r1, r9
 8002ec2:	4640      	mov	r0, r8
 8002ec4:	47d0      	blx	sl
 8002ec6:	3001      	adds	r0, #1
 8002ec8:	d09d      	beq.n	8002e06 <_printf_i+0x15e>
 8002eca:	3501      	adds	r5, #1
 8002ecc:	68e3      	ldr	r3, [r4, #12]
 8002ece:	9903      	ldr	r1, [sp, #12]
 8002ed0:	1a5b      	subs	r3, r3, r1
 8002ed2:	42ab      	cmp	r3, r5
 8002ed4:	dcf2      	bgt.n	8002ebc <_printf_i+0x214>
 8002ed6:	e7eb      	b.n	8002eb0 <_printf_i+0x208>
 8002ed8:	2500      	movs	r5, #0
 8002eda:	f104 0619 	add.w	r6, r4, #25
 8002ede:	e7f5      	b.n	8002ecc <_printf_i+0x224>
 8002ee0:	0800303b 	.word	0x0800303b
 8002ee4:	0800304c 	.word	0x0800304c

08002ee8 <memmove>:
 8002ee8:	4288      	cmp	r0, r1
 8002eea:	b510      	push	{r4, lr}
 8002eec:	eb01 0402 	add.w	r4, r1, r2
 8002ef0:	d902      	bls.n	8002ef8 <memmove+0x10>
 8002ef2:	4284      	cmp	r4, r0
 8002ef4:	4623      	mov	r3, r4
 8002ef6:	d807      	bhi.n	8002f08 <memmove+0x20>
 8002ef8:	1e43      	subs	r3, r0, #1
 8002efa:	42a1      	cmp	r1, r4
 8002efc:	d008      	beq.n	8002f10 <memmove+0x28>
 8002efe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f06:	e7f8      	b.n	8002efa <memmove+0x12>
 8002f08:	4601      	mov	r1, r0
 8002f0a:	4402      	add	r2, r0
 8002f0c:	428a      	cmp	r2, r1
 8002f0e:	d100      	bne.n	8002f12 <memmove+0x2a>
 8002f10:	bd10      	pop	{r4, pc}
 8002f12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002f16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002f1a:	e7f7      	b.n	8002f0c <memmove+0x24>

08002f1c <_sbrk_r>:
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	2300      	movs	r3, #0
 8002f20:	4d05      	ldr	r5, [pc, #20]	@ (8002f38 <_sbrk_r+0x1c>)
 8002f22:	4604      	mov	r4, r0
 8002f24:	4608      	mov	r0, r1
 8002f26:	602b      	str	r3, [r5, #0]
 8002f28:	f7fd fb50 	bl	80005cc <_sbrk>
 8002f2c:	1c43      	adds	r3, r0, #1
 8002f2e:	d102      	bne.n	8002f36 <_sbrk_r+0x1a>
 8002f30:	682b      	ldr	r3, [r5, #0]
 8002f32:	b103      	cbz	r3, 8002f36 <_sbrk_r+0x1a>
 8002f34:	6023      	str	r3, [r4, #0]
 8002f36:	bd38      	pop	{r3, r4, r5, pc}
 8002f38:	20000248 	.word	0x20000248

08002f3c <memchr>:
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	b510      	push	{r4, lr}
 8002f40:	b2c9      	uxtb	r1, r1
 8002f42:	4402      	add	r2, r0
 8002f44:	4293      	cmp	r3, r2
 8002f46:	4618      	mov	r0, r3
 8002f48:	d101      	bne.n	8002f4e <memchr+0x12>
 8002f4a:	2000      	movs	r0, #0
 8002f4c:	e003      	b.n	8002f56 <memchr+0x1a>
 8002f4e:	7804      	ldrb	r4, [r0, #0]
 8002f50:	3301      	adds	r3, #1
 8002f52:	428c      	cmp	r4, r1
 8002f54:	d1f6      	bne.n	8002f44 <memchr+0x8>
 8002f56:	bd10      	pop	{r4, pc}

08002f58 <memcpy>:
 8002f58:	440a      	add	r2, r1
 8002f5a:	4291      	cmp	r1, r2
 8002f5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f60:	d100      	bne.n	8002f64 <memcpy+0xc>
 8002f62:	4770      	bx	lr
 8002f64:	b510      	push	{r4, lr}
 8002f66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f6a:	4291      	cmp	r1, r2
 8002f6c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f70:	d1f9      	bne.n	8002f66 <memcpy+0xe>
 8002f72:	bd10      	pop	{r4, pc}

08002f74 <_realloc_r>:
 8002f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f78:	4680      	mov	r8, r0
 8002f7a:	4615      	mov	r5, r2
 8002f7c:	460c      	mov	r4, r1
 8002f7e:	b921      	cbnz	r1, 8002f8a <_realloc_r+0x16>
 8002f80:	4611      	mov	r1, r2
 8002f82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f86:	f7ff bc39 	b.w	80027fc <_malloc_r>
 8002f8a:	b92a      	cbnz	r2, 8002f98 <_realloc_r+0x24>
 8002f8c:	f7ff fbcc 	bl	8002728 <_free_r>
 8002f90:	2400      	movs	r4, #0
 8002f92:	4620      	mov	r0, r4
 8002f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f98:	f000 f81a 	bl	8002fd0 <_malloc_usable_size_r>
 8002f9c:	4285      	cmp	r5, r0
 8002f9e:	4606      	mov	r6, r0
 8002fa0:	d802      	bhi.n	8002fa8 <_realloc_r+0x34>
 8002fa2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002fa6:	d8f4      	bhi.n	8002f92 <_realloc_r+0x1e>
 8002fa8:	4629      	mov	r1, r5
 8002faa:	4640      	mov	r0, r8
 8002fac:	f7ff fc26 	bl	80027fc <_malloc_r>
 8002fb0:	4607      	mov	r7, r0
 8002fb2:	2800      	cmp	r0, #0
 8002fb4:	d0ec      	beq.n	8002f90 <_realloc_r+0x1c>
 8002fb6:	42b5      	cmp	r5, r6
 8002fb8:	462a      	mov	r2, r5
 8002fba:	4621      	mov	r1, r4
 8002fbc:	bf28      	it	cs
 8002fbe:	4632      	movcs	r2, r6
 8002fc0:	f7ff ffca 	bl	8002f58 <memcpy>
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	4640      	mov	r0, r8
 8002fc8:	f7ff fbae 	bl	8002728 <_free_r>
 8002fcc:	463c      	mov	r4, r7
 8002fce:	e7e0      	b.n	8002f92 <_realloc_r+0x1e>

08002fd0 <_malloc_usable_size_r>:
 8002fd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fd4:	1f18      	subs	r0, r3, #4
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	bfbc      	itt	lt
 8002fda:	580b      	ldrlt	r3, [r1, r0]
 8002fdc:	18c0      	addlt	r0, r0, r3
 8002fde:	4770      	bx	lr

08002fe0 <_init>:
 8002fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe2:	bf00      	nop
 8002fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fe6:	bc08      	pop	{r3}
 8002fe8:	469e      	mov	lr, r3
 8002fea:	4770      	bx	lr

08002fec <_fini>:
 8002fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fee:	bf00      	nop
 8002ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ff2:	bc08      	pop	{r3}
 8002ff4:	469e      	mov	lr, r3
 8002ff6:	4770      	bx	lr
